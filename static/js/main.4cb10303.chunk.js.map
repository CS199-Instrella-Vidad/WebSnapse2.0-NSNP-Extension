{"version":3,"sources":["components/SNP/stylesheet.js","components/SNP/Snapse/useAnimateEdges.js","utils/helpers.js","utils/automata.js","components/SNP/Snapse/Snapse.js","components/SNP/forms/ElementPopUp.js","components/SNP/forms/ChooseRuleForm.js","components/SNP/forms/NewNodeForm.js","components/SNP/forms/AddSynapseWeightForm.js","components/SNP/forms/NewOutputNodeForm.js","components/SNP/forms/NewInputNodeForm.js","components/SNP/forms/EditNodeForm.js","components/SNP/forms/EditInputNodeForm.js","components/SNP/forms/EditSynapseForm.js","components/SNP/forms/DeleteNodeForm.js","components/SNP/forms/DeleteAllForm.js","components/SNP/forms/DeleteSynapseForm.js","components/SNP/ChoiceHistory/ChoiceHistory.js","components/SNP/useUnsavedChanges/useUnsavedChanges.js","components/Header/Header.jsx","components/Header/ComputingControls.jsx","components/SNP/Tour/Tour.js","components/Menu/Menu.jsx","pages/SNP/SNP.jsx","App.js","reportWebVitals.js","fonts/Peace Sans.otf","index.js"],"names":["styles","selector","style","color","content","events","height","shape","width","_style","_defineProperty","css","label","useAnimateEdges","cyRef","useRef","useEffect","raf","cy","current","animOffset","animate","edges","requestAnimationFrame","cancelAnimationFrame","internal","createNeuron","newId","x","y","rules","spike","time","data","id","concat","includes","substr","indexOf","position","classes","parent","replace","createOutputNeuron","output","rootId","replaceAll","createInputNeuron","input","checkValidRule","rule","result","exec","console","log","createEdge","src","dst","weight","c","source","target","title","allRulesValid","splitRules","split","count","i","length","parseRule","testRes","forgetRes","_testRes","_slicedToArray","requires","grouped","char","symbol","consumes","produces","delayStr","delay","parseInt","_forgetRes","canUseRule","spikes","step","neurons","isRandom","handleStartGuidedMode","handleSimulationEnd","newStates","produce","draft","spikeAdds","outputTracker","inputTracker","neuronValidRules","shouldEnd","k","neuron","currentRule","isOutput","isInput","chosenRule","validRules","_parseRule","_parseRule2","push","_parseRule3","_parseRule4","randomIndex","Math","floor","random","_parseRule5","_parseRule6","Object","keys","window","localStorage","setItem","neuronOutWeights","_objectSpread","outWeights","newDelay","valueOf","_parseRule7","_parseRule8","newSpikes","out","_step","neuronOutKeys","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","bitstring","spike_arr","len","_step2","neuronOut_in","_iterator2","spk","bit","newString","JSON","stringify","backStep","parse","getItem","Snapse","_ref","onEdgeCreate","handleShowDeleteAll","handleChangePosition","setIsClickedSynapse","headless","setNeurons","checkIsHover","handleShowEditSynapseModal","handleShowDeleteSynapseModal","isClickedSynapse","_useAnimateEdges","_useAnimateEdges2","setCy","elements","array","nodes","edgeIDs","Set","element","newNodes","newInputNode","newOutputNode","newEdge","add","newEdges","convertElements","on","evt","event","evtTarget","srcID","dstID","isNode","isEdge","edgeID","temp_edgeArr","unbind","bind","checker","Boolean","popperRefObj","popper","document","createElement","classList","node_type","node","innerHTML","strSpkRules","strFrgRules","_splitRules","_splitRules2","spkRules","frgRules","join","body","appendChild","edge_ID_arr","weightsDict","synapse_weight","state","remove","destroy","gridGuide","guidelinesStyle","strokeStyle","horizontalDistColor","verticalDistColor","initPosAlignmentColor","edgehandles","handleNodes","preview","loopAllowed","edgeType","sourceNode","targetNode","complete","_jsx","_jsxs","children","Button","className","variant","onClick","center","fit","zoom","level","AlignCenter","size","textAlign","marginRight","disabled","PencilSquare","XCircle","float","Trash","CytoscapeComponent","wheelSensitivity","normalizeElements","stylesheet","ElementPopUp","showElementPopup","handleCloseElementPopup","nodeID","handleError","nodeType","nodeSRules","nodeFRules","nodeSpikes","nodeBitstring","_useState","useState","_useState2","_useState3","_useState4","handleClose","Modal","show","onHide","Header","closeButton","Title","Body","ChooseRuleForm","showChooseRuleModal","handleCloseChooseRuleModal","handleChosenRules","_useImmer","useImmer","_useImmer2","values","setValues","handleSelectChange","neuronId","currentValues","GroupRules","options","neuronOptions","map","Form","Group","Label","Control","as","onChange","ruleList","form","backdrop","keyboard","onSubmit","preventDefault","type","renderTooltip","props","Tooltip","formReducer","reset","startingSpikes","name","initialFormState","NewNodeForm","showNewNodeModal","handleCloseModal","handleNewNode","_useReducer","useReducer","_useReducer2","formData","setFormData","setSubmitting","handleChange","shortid","generate","setTimeout","newNeuron","data-testid","htmlFor","required","placeholder","OverlayTrigger","placement","hide","overlay","QuestionCircle","Text","min","AddSynapseWeightForm","showAddWeightModal","handleCloseAddWeightModal","handleAddWeight","srce","dest","NewOutputNodeForm","showNewOutputModal","handleCloseNewOutputModal","handleNewOutput","NewInputNodeForm","showNewInputModal","handleCloseNewInputModal","handleNewInput","newInput","EditNodeForm","showEditModal","handleCloseEditModal","handleEditNode","setNeuronId","setRules","_useState5","_useState6","setStartingSpikes","reduce","r","filteredObject","defaultValue","EditInputNodeForm","showEditInputModal","handleCloseEditInputModal","handleEditInputNode","spikeTrain","setSpikeTrain","EditSynapseForm","currWeight","showEditSynapseModal","handleCloseEditSynapseModal","handleEditSynapse","setWeight","weight_main","handleDeleteSynapse","handleSubmit","DeleteNodeForm","showDeleteModal","handleCloseDeleteModal","handleDeleteNode","defaultNeuron","showDeleteAllModal","handleCloseDeleteAllModal","handleDeleteAll","DeleteSynapseForm","showDeleteSynapseModal","handleCloseDeleteSynapseModal","TableCell","TableRow","ChoiceHistory","showChoiceHistoryModal","handleCloseHoiceHistoryModal","getLatestState","neuronIds","neuronRows","neuronCells","Table","striped","bordered","hover","useUnsavedChanges","isDirty","setDirty","message","onbeforeunload","Prompt","when","progBarRate","shortening","keyframes","_templateObject","_taggedTemplateLiteral","ProgressBar","styled","div","_templateObject2","isPlaying","_templateObject3","sliderThumbLabelFormat","MainHeader","sld_value","setSldValue","onNullForward","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","simu_speed","interval","setInterval","onIntervalStepRef","clearInterval","fontWeight","Row","Col","sm","DropdownButton","mode","onSelect","setMode","Dropdown","Item","eventKey","setIsRandom","backgroundColor","borderRadius","padding","ClockFill","marginBottom","onBackward","SkipBackwardFill","display","pBar","hasEnded","alert","setIsPlaying","p","PauseFill","PlayFill","onForward","SkipForwardFill","hidden","Sliders","Slider","aria-label","max","newValue","valueLabelDisplay","valueLabelFormat","ComputingControls","handleShow","PlusSquare","handleShowNewInputModal","BoxArrowInRight","handleShowNewOutputModal","BoxArrowRight","handleShowDeleteModal","handleShowEditModal","handleShowEditInputModal","handleReset","marginTop","ArrowCounterclockwise","TOUR_STEPS","disableBeacon","disableOverlayClose","floaterProps","disableAnimation","offset","INITIAL_STATE","key","Date","run","continuous","loading","stepIndex","steps","reducer","undefined","action","payload","beaconInner","tooltip","textColor","fontSize","tooltipContainer","tooltipTitle","margin","buttonNext","buttonBack","buttonSkip","mixBlendMode","spotlightLegacy","boxShadow","floater","arrow","zIndex","Tour","_ref2","handleShowSideBarMenu","handleCloseSideBarMenu","restartTutorial","handleFalseRestartTutorial","tourState","dispatch","_Fragment","JoyRide","callback","index","status","ACTIONS","CLOSE","STATUS","SKIPPED","FINISHED","EVENTS","STEP_AFTER","TARGET_NOT_FOUND","PREV","scrollToFirstStep","showSkipButton","hideBackButton","showProgress","locale","last","skip","compact","ignoreComment","spaces","sanitize","Menu","fileName","setFileName","BMenu","isOpen","showSideBarMenu","setShowSideBarMenu","disableCloseOnEsc","disableOverlayClick","noOverlay","File","custom","file","files","setHasEnded","showError","reader","FileReader","removeJsonTextAttribute","parentElement","pOpKeys","keyNo","keyName","arrOfKey","arr","arrIndex","_parent","nativeType","_x","_x2","addEventListener","_callee2","_context2","trim","ignoreDeclaration","ignoreInstruction","ignoreAttributes","ignoreCdata","ignoreDoctype","textFn","convert","xml2js","sent","_x3","readAsText","setTime","nValue","Number","isNaN","bValue","toLowerCase","handleLoad","Link","to","wrapper","json2xml","blob","Blob","saveAs","toString","setPristine","Save2","handleShowChoiceHistoryModal","ClockHistory","href","download","handleTrueRestartTutorial","Check","defaultChecked","isHover","srcDel","dstDel","useKey","cb","isFocus","callbackRef","inputs","getElementsByTagName","handleKeyDown","code","fn","timerId","_len","args","Array","_key","clearTimeout","debounced","removeEventListener","SNP","n1","n2","n3","n4","setSrce","setDest","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","_useState21","_useState22","_useUnsavedChanges","_useUnsavedChanges2","_useState23","_useState24","setShowElementPopup","_useState25","_useState26","setShowAddWeightModal","_useState27","_useState28","setShowNewNodeModal","_useState29","_useState30","setShowNewOutputModal","_useState31","_useState32","setShowNewInputModal","_useState33","_useState34","setShowChooseRuleModal","_useState35","_useState36","setShowEditModal","_useState37","_useState38","setShowEditInputModal","_useState39","_useState40","setShowEditSynapseModal","_useState41","_useState42","setShowChoiceHistoryModal","_useState43","_useState44","setShowDeleteAllModal","_useState45","_useState46","setShowDeleteModal","_useState47","_useState48","setShowDeleteSynapseModal","_useState49","_useState50","_useState51","_useState52","_useState53","_useState54","_useState55","_useState56","error","setError","_useState57","_useState58","setPBar","_useState59","_useState60","handleShowDeleteAllModal","_useState61","_useState62","_useState63","_useState64","setRestartTutorial","text","outCopy","_toConsumableArray","_handleEditSynapse","_callee5","src_id","dst_id","new_weight","_context5","handleNullForward","_x4","_x5","_handleDeleteSynapse","_callee6","_context6","filter","item","newoutArr","newweightsDict","_x6","_x7","_x8","_x9","_handleAddWeight","_callee7","flag","_context7","handleNewPosition","_x10","_x11","_handleNewNode","_callee8","_context8","_handleNewOutput","_callee9","newOutput","_context9","_handleNewInput","_callee10","_context10","_handleShowDeleteAll","_callee11","_context11","_handleEditNode","_callee12","_context12","_handleEditInputNode","_callee13","_context13","_handleDeleteNode","_callee14","_context14","_handleDeleteAll","_callee15","_context15","currNeurons","tempNeurons","clear","_useState65","_useState66","guidedRules","setGuidedRules","_x21","_ref3","_callee3","_context3","_ref4","_callee4","tempTime","_context4","handleDelBackspaceKey","getElementById","click","Alert","Container","addedEles","click_flag","curr_weight","process","testRe","forgetRe","spikeRules","forgRules","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","DeleteAllForm","_x20","j","App","Router","Switch","Route","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cytoscape","use","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.4cb10303.chunk.js","sourcesContent":["const styles = [\n  {\n    selector: \".snapse-node, .snapse-output, .snapse-input\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"padding-top\": \"0\",\n      \"border-width\": 0,\n      \"text-halign\": \"left\",\n      \"text-valign\": \"top\",\n      color: \"black\",\n      content: \"data(label)\",\n    },\n  },\n  {\n    selector: \".snapse-node__closed\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"padding-top\": \"0\",\n      \"border-width\": 0,\n      \"text-halign\": \"left\",\n      \"text-valign\": \"top\",\n      \"background-color\": \"gray\",\n      color: \"black\",\n      content: \"data(label)\",\n    },\n  },\n  {\n    selector: \".snapse-node__rules, .snapse-node__output, .snapse-node__input\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"font-style\": \"italic\",\n      \"background-color\": \"white\",\n      \"border-width\": 1,\n      events: \"no\",\n      \"text-wrap\": \"wrap\",\n      \"text-max-width\": \"100px\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      content: \"data(label)\",\n      height: 150,\n      shape: \"roundrectangle\",\n      width: 100,\n    },\n  },\n  {\n    selector: \".snapse-node__rules__closed\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"font-style\": \"italic\",\n      \"background-color\": \"gray\",\n      \"border-width\": 3,\n      events: \"no\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      \"text-wrap\": \"wrap\",\n      \"text-max-width\": \"100px\",\n      content: \"data(label)\",\n      height: 150,\n      shape: \"roundrectangle\",\n      width: 100,\n    },\n  },\n  {\n    selector: \".snapse-node__time, .snapse-node__spike\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      content: \"data(label)\",\n      events: \"no\",\n      height: 15,\n      shape: \"roundrectangle\",\n      width: 50,\n    },\n  },\n  {\n    selector: \".snapse-node__time__closed, .snapse-node__spike__closed\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"background-opacity\": \"0\",\n      \"text-halign\": \"center\",\n      \"text-valign\": \"center\",\n      content: \"data(label)\",\n      events: \"no\",\n      height: 15,\n      shape: \"roundrectangle\",\n      width: 50,\n    },\n  },\n  /*     {\n            selector: 'node',\n            style: {\n                'background-opacity': '0',\n                'padding-top': '0',\n                'text-halign': 'left',\n                'text-valign': 'top',\n                color: 'black',\n                content: 'data(label)',\n                'border-width': 1,\n                events: 'no',\n                'text-wrap': 'wrap',\n                shape: 'roundrectangle'\n            }\n        }, */\n  {\n    selector: \"edge\",\n    style: {\n      \"font-family\": \"Computer Modern\",\n      \"curve-style\": \"bezier\",\n      \"target-arrow-shape\": \"triangle\",\n      \"text-background-color\": \"white\",\n      \"text-background-shape\": \"rectangle\",\n      width: 1,\n      // content: 'data(label)',\n      // 'text-halign': 'center',\n      // 'text-valign': 'top',\n    },\n  },\n  {\n    selector: \".edge--triggering\",\n    style: {\n      \"line-color\": \"magenta\",\n      \"line-style\": \"dashed\",\n      \"target-arrow-color\": \"magenta\",\n      \"line-color\": \"magenta\",\n      \"line-style\": \"dashed\",\n      \"target-arrow-color\": \"magenta\",\n      width: 4,\n      \"line-dash-offset\": 3,\n      \"line-dash-pattern\": [15, 3],\n      \"arrow-scale\": 1.5,\n    },\n    // content: 'data(label)',\n    // 'text-halign': 'center',\n    // 'text-valign': 'top',\n  },\n  {\n    selector: \"edge[label]\",\n    css: {\n      label: \"data(label)\",\n      \"text-rotation\": \"autorotate\",\n      \"text-margin-x\": \"0px\",\n      \"text-margin-y\": \"0px\",\n      \"text-background-opacity\": 1,\n      \"font-weight\": \"bold\",\n      \"font-size\": 18,\n    },\n  },\n];\nexport default styles;\n","import { useEffect, useRef } from \"react\";\nimport cytoscapejs from \"cytoscape\";\n\nfunction useAnimateEdges() {\n  const cyRef = useRef(null);\n  const setCy = (internal) => {\n    cyRef.current = internal;\n  };\n\n  useEffect(() => {\n    const cy = cyRef.current;\n    let raf;\n    let animOffset = 0;\n\n    function animate() {\n      animOffset++;\n      if (cy) {\n        cy.edges().animate({\n          style: { \"line-dash-offset\": -animOffset },\n        });\n      }\n      raf = requestAnimationFrame(animate);\n    }\n\n    animate();\n\n    return () => {\n      if (raf) {\n        cancelAnimationFrame(raf);\n      }\n    };\n  }, []);\n\n  return [cyRef, setCy];\n}\n\nexport default useAnimateEdges;\n","export const createNeuron = (newId, x, y, rules, spike, time) => [\n  {\n    data: {\n      id: newId,\n      label: `${\n        newId.includes(\"-\") ? newId.substr(0, newId.indexOf(\"-\")) : newId\n      }`,\n    },\n    position: { x: x, y: y },\n    classes: \"snapse-node\",\n  },\n  {\n    data: {\n      id: newId + \"-rules\",\n      parent: newId,\n      label: rules.replace(/ /g, \"\\n\").replace(/->/g, \"→\"),\n    },\n    position: { x: x, y: y },\n    classes: \"snapse-node__rules\",\n  },\n  {\n    data: {\n      id: newId + \"-spike\",\n      parent: newId,\n      label: spike,\n    },\n    position: { x: x, y: y - 60 },\n    classes: \"snapse-node__spike\",\n  },\n  {\n    data: {\n      id: newId + \"-time\",\n      parent: newId,\n      label: `${time < 0 ? \"!\" : time}`,\n    },\n    position: { x: x, y: y + 90 },\n    classes: \"snapse-node__time\",\n  },\n];\n\nexport const createClosedNeuron = (newId, x, y, rules, spike, time) => [\n  {\n    data: {\n      id: newId,\n      label: `${\n        newId.includes(\"-\") ? newId.substr(0, newId.indexOf(\"-\")) : newId\n      }`,\n    },\n    position: { x: x, y: y },\n    classes: \"snapse-node__closed\",\n  },\n  {\n    data: {\n      id: newId + \"-rules\",\n      parent: newId,\n      label: rules.replace(/ /g, \"\\n\").replace(/->/g, \"→\"),\n    },\n    position: { x: x, y: y },\n    classes: \"snapse-node__rules__closed\",\n  },\n  {\n    data: {\n      id: newId + \"-spike\",\n      parent: newId,\n      label: spike,\n    },\n    position: { x: x, y: y - 60 },\n    classes: \"snapse-node__spike__closed\",\n  },\n  {\n    data: {\n      id: newId + \"-time\",\n      parent: newId,\n      label: time,\n    },\n    position: { x: x, y: y + 90 },\n    classes: \"snapse-node__time__closed\",\n  },\n];\nexport const createOutputNeuron = (id, x, y, output, spike) => [\n  {\n    data: {\n      rootId: id,\n      id: `${id}`,\n      label: `${id.includes(\"-\") ? id.substr(0, id.indexOf(\"-\")) : id}`,\n    },\n    classes: \"snapse-output\",\n    position: { x: 0, y: 0 },\n  },\n  {\n    data: {\n      rootId: id,\n      id: `${id}-output`,\n      parent: id,\n      label: `${\n        typeof output === \"string\"\n          ? output\n              .replace(/\\[object Object\\]/g, \"\")\n              .replaceAll(/(.{12})/g, \"$&\\n\")\n          : \"\"\n      }`,\n    },\n    classes: \"snapse-node__output\",\n    position: { x, y: y },\n  },\n  {\n    data: { rootId: id, id: `${id}-spike`, parent: id, label: \"\" },\n    classes: \"snapse-node__spike\",\n    position: { x, y: y + 40 },\n  },\n];\n\nexport const createInputNeuron = (id, x, y, input, spike) => [\n  {\n    data: {\n      id: id,\n      label: `${id.includes(\"-\") ? id.substr(0, id.indexOf(\"-\")) : id}`,\n    },\n    position: { x: x, y: y },\n    classes: \"snapse-input\",\n  },\n  {\n    data: {\n      rootId: id,\n      id: `${id}-input`,\n      parent: id,\n      label: `${\n        typeof input === \"string\"\n          ? input\n              .replace(/\\[object Object\\]/g, \"\")\n              .replaceAll(/(.{12})/g, \"$&\\n\")\n          : \"\"\n      }`,\n    },\n    classes: \"snapse-node__input\",\n    position: { x, y: y },\n  },\n];\nexport const checkValidRule = (rule) => {\n  const re = /(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/;\n  const testRe =\n    /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->([0-9]*)a;([0-9]+)/;\n  const forgetRe = /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->(0);(0)/;\n  var result = testRe.exec(rule) || forgetRe.exec(rule);\n  console.log(\"RESSSS\", result);\n  return result;\n};\n\nexport const createEdge = (src, dst, weight, c) => {\n  return {\n    data: {\n      id: src + \"->\" + dst,\n      source: src,\n      target: dst,\n      label: weight,\n      title: \"synapse weight\",\n    },\n    classes: c,\n  };\n};\n\nexport const allRulesValid = (rules) => {\n  var splitRules = rules.split(\" \");\n  var count = 0;\n  for (var i = 0; i < splitRules.length; i++) {\n    if (checkValidRule(splitRules[i]) != null) {\n      count += 1;\n    } else {\n      console.log(\"invalidRule\", splitRules[i]);\n    }\n  }\n  if (count == splitRules.length) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nexport const splitRules = (rules) => {\n  const testRe =\n    /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->([0-9]*)a;([0-9]+)/;\n  const forgetRe = /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->(0);(0)/;\n\n  var spikeRules = [];\n  var forgRules = [];\n\n  var splitRules = rules.split(\" \");\n  for (var i = 0; i < splitRules.length; i++) {\n    var testRes = testRe.exec(splitRules[i]);\n    var forgetRes = forgetRe.exec(splitRules[i]);\n\n    if (testRes) {\n      spikeRules.push(splitRules[i]);\n    } else if (forgetRes) {\n      forgRules.push(splitRules[i]);\n    }\n  }\n\n  return [spikeRules, forgRules];\n};\n\nexport const convertElements = (elements) => {\n  var array = {\n    nodes: [],\n    edges: [],\n    edgeIDs: new Set(),\n  };\n  for (var k in elements) {\n    var element = elements[k];\n    if (element.currentRule) {\n      // currently applying a rule\n      var newNodes = createClosedNeuron(\n        element.id,\n        element.position.x,\n        element.position.y,\n        element.rules,\n        element.spikes,\n        element.delay\n      );\n      array.nodes.push(newNodes[0]);\n      array.nodes.push(newNodes[1]);\n      array.nodes.push(newNodes[2]);\n      array.nodes.push(newNodes[3]);\n    } else if (!element.isOutput && !element.isInput) {\n      // standard interface for regular neurons\n      var newNodes = createNeuron(\n        element.id,\n        element.position.x,\n        element.position.y,\n        element.rules,\n        element.spikes,\n        element.delay\n      );\n      array.nodes.push(newNodes[0]);\n      array.nodes.push(newNodes[1]);\n      array.nodes.push(newNodes[2]);\n      array.nodes.push(newNodes[3]);\n    } else if (element.isInput) {\n      // input neuron\n      var newInputNode = createInputNeuron(\n        element.id,\n        element.position.x,\n        element.position.y,\n        element.bitstring,\n        0\n      );\n      array.nodes.push(newInputNode[0]);\n      array.nodes.push(newInputNode[1]);\n    } else {\n      var newOutputNode = createOutputNeuron(\n        element.id,\n        element.position.x,\n        element.position.y,\n        element.bitstring,\n        0\n      );\n      array.nodes.push(newOutputNode[0]);\n      array.nodes.push(newOutputNode[1]);\n      array.nodes.push(newOutputNode[2]);\n    }\n    if (element.out) {\n      for (var i = 0; i < element.out.length; i++) {\n        if (element.delay < 0) {\n          for (let out of element.out) {\n            var newEdge = createEdge(\n              element.id,\n              element.out[i],\n              element.outWeights[element.out[i]],\n              \" edge--triggering\"\n            );\n            array.edges.push(newEdge);\n            array.edgeIDs.add(element.id + \"->\" + element.out[i]);\n          }\n        } else {\n          var newEdges = createEdge(\n            element.id,\n            element.out[i],\n            element.outWeights[element.out[i]],\n            \"\"\n          );\n          array.edges.push(newEdges);\n          array.edgeIDs.add(element.id + \"->\" + element.out[i]);\n        }\n      }\n    }\n  }\n  return array;\n};\n","import produce from \"immer\";\nexport function parseRule(rule, id) {\n  const re = /(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/;\n  // const forgetRe = /(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(0);(0)/\n  const forgetRe = /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->(0);(0)/;\n\n  // const testRe = /(a+)\\(*(a*)\\)*(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n  // const testRe = /([0-9]*)a\\(*([0-9]*)a*\\)*(\\+?|\\*?)\\/([0-9]*)a->([0-9]*)a;([0-9]+)/\n  const testRe =\n    /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->([0-9]*)a;([0-9]+)/;\n  const res = re.exec(rule);\n  const testRes = testRe.exec(rule);\n  const forgetRes = forgetRe.exec(rule);\n\n  /* if (res) {\n      const [, requires, symbol, consumes, produces, delayStr] = res\n      const delay = parseInt(delayStr, 10)\n      return[requires.length, symbol, consumes.length, produces.length, delay];\n    } */\n  if (testRes) {\n    console.log(\"Test Res\");\n    var [, requires, grouped, char, symbol, consumes, produces, delayStr] =\n      testRes;\n    const delay = parseInt(delayStr, 10);\n\n    if (requires == \"\") {\n      requires = 1;\n    }\n    if (char != \"\" && grouped == \"\") {\n      grouped = 1;\n    }\n\n    if (consumes == \"\") {\n      consumes = 1;\n    }\n\n    if (produces == \"\") {\n      produces = 1;\n    }\n\n    console.log({\n      id: id,\n      requires: requires,\n      char: char,\n      grouped: grouped,\n      symbol: symbol,\n      consumes: consumes,\n      produces: produces,\n      delay: parseInt(delayStr),\n    });\n\n    return [\n      parseInt(requires),\n      parseInt(grouped),\n      symbol,\n      parseInt(consumes),\n      parseInt(produces),\n      delay,\n    ];\n  } else if (forgetRes) {\n    var [, requires, grouped, char, symbol, consumes, produces, delayStr] =\n      forgetRes;\n    if (requires == \"\") {\n      requires = 1;\n    }\n\n    if (char != \"\" && grouped == \"\") {\n      grouped = 1;\n    }\n\n    if (consumes == \"\") {\n      consumes = 1;\n    }\n    if (produces == \"\") {\n      produces = 1;\n    }\n\n    console.log({\n      id: id,\n      requires: requires,\n      grouped: grouped,\n      symbol: symbol,\n      consumes: consumes,\n      produces: produces,\n      delay: parseInt(delayStr),\n    });\n    return [\n      parseInt(requires),\n      parseInt(grouped),\n      symbol,\n      parseInt(consumes),\n      0,\n      0,\n    ];\n  }\n\n  return false;\n}\nexport function canUseRule(requires, grouped, symbol, spikes, consumes) {\n  if (consumes > spikes) {\n    return false;\n  }\n\n  if (symbol == \"+\") {\n    if (grouped > 0) {\n      if ((spikes - requires) % grouped == 0 && spikes - requires >= grouped) {\n        return true;\n      }\n      return false;\n    }\n    if (spikes >= requires) {\n      return true;\n    }\n  } else if (symbol == \"*\") {\n    if (grouped > 0) {\n      if ((spikes - requires) % grouped == 0) {\n        return true;\n      }\n      return false;\n    }\n    if (spikes >= requires - 1) {\n      return true;\n    }\n  } else if (spikes == requires) {\n    return true;\n  }\n  return false;\n}\nexport function step(\n  neurons,\n  time,\n  isRandom,\n  handleStartGuidedMode,\n  handleSimulationEnd\n) {\n  const newStates = produce(neurons, (draft) => {\n    const spikeAdds = {};\n    const outputTracker = [];\n    const inputTracker = [];\n    var neuronValidRules = {};\n    var shouldEnd = true;\n\n    for (var k in draft) {\n      var neuron = draft[k];\n      //choose rule to follow if not working on a rule currently\n      if (!neuron.currentRule && !neuron.isOutput && !neuron.isInput) {\n        delete draft[neuron.id].chosenRule;\n        delete draft[neuron.id].currentRule;\n        //pick a rule\n        var rules = neuron.rules.split(\" \");\n        var validRules = [];\n        for (var i = 0; i < rules.length; i++) {\n          var [requires, grouped, symbol, consumes, produces, delay] =\n            parseRule(rules[i], k);\n          if (canUseRule(requires, grouped, symbol, neuron.spikes, consumes)) {\n            console.log(\"should end1\", shouldEnd);\n            validRules.push(rules[i]);\n            shouldEnd = false;\n          }\n        }\n        console.log(\"should end2\", shouldEnd);\n        if (validRules.length == 1) {\n          draft[neuron.id].currentRule = validRules[0];\n          draft[neuron.id].chosenRule = validRules[0];\n          var [requires, grouped, symbol, consumes, produces, delay] =\n            parseRule(validRules[0], k);\n          draft[neuron.id].delay = delay;\n        } else if (isRandom == true && validRules.length > 1) {\n          var randomIndex = Math.floor(Math.random() * validRules.length);\n          var [requires, grouped, symbol, consumes, produces, delay] =\n            parseRule(validRules[randomIndex], k);\n          draft[neuron.id].currentRule = validRules[randomIndex];\n          draft[neuron.id].chosenRule = validRules[randomIndex];\n          draft[neuron.id].delay = delay;\n        } else if (isRandom == false && validRules.length > 1) {\n          neuronValidRules[neuron.id] = validRules;\n        }\n      }\n    }\n    if (Object.keys(neuronValidRules).length > 0) {\n      console.log(\"Neuron valid rules\", neuronValidRules);\n      window.localStorage.setItem(\"shouldTimeStep\", \"0\");\n      handleStartGuidedMode(neuronValidRules);\n      return;\n    }\n    for (var k in draft) {\n      var neuron = draft[k];\n      var neuronOutWeights = { ...neuron.outWeights };\n      //work on the rule\n      if (neuron.currentRule) {\n        shouldEnd = false;\n        if (neuron.delay >= 0) {\n          let newDelay = neuron.delay.valueOf();\n          newDelay--;\n          draft[neuron.id].delay = newDelay;\n        }\n\n        if (neuron.delay < 0) {\n          //consume spikes\n          var [requires, grouped, symbol, consumes, produces, delay] =\n            parseRule(neuron.currentRule, k);\n\n          let newSpikes = neuron.spikes.valueOf();\n          newSpikes -= consumes;\n\n          draft[neuron.id].spikes = newSpikes;\n\n          //send spikes\n          if (neuron.out) {\n            const neuronOutKeys = neuron.out;\n            for (let k of neuronOutKeys) {\n              spikeAdds[k] =\n                k in spikeAdds\n                  ? spikeAdds[k] + produces * neuronOutWeights[k]\n                  : produces * neuronOutWeights[k];\n\n              console.log(\"Sent spikes to \" + k + \": \" + spikeAdds[k]);\n            }\n          }\n\n          //resolve rule\n          delete draft[neuron.id].currentRule;\n        }\n      } else if (neuron.isInput) {\n        inputTracker.push(neuron.id);\n        console.log(\"BS\", neuron.bitstring);\n        var spike_arr = neuron.bitstring.split(\",\");\n        var len = spike_arr.length;\n        console.log(\"SPIKE ARR\", spike_arr);\n\n        if (neuron.bitstring.length < 1) {\n          len = 0;\n        }\n\n        if (neuron.out) {\n          const neuronOut_in = neuron.out;\n          for (let k of neuronOut_in) {\n            var bit = parseInt(spike_arr[time]);\n            console.log(\"TIME\", time);\n            console.log(\"LEN\", len);\n            var spk;\n            console.log(\"Bit\", bit);\n            if (time < len) {\n              // Check if bitstring length is less than time\n              console.log(\"TIME OK\");\n              shouldEnd = false;\n              let newDelay = neuron.delay.valueOf();\n              newDelay--;\n              draft[neuron.id].delay = newDelay;\n\n              spk = bit * neuronOutWeights[k]; // Multiply # of spikes by the SYNAPSE WEIGHT\n            } else {\n              console.log(\"TIME EXCEED\");\n              spk = 0;\n              draft[neuron.id].delay = 0;\n            }\n            spikeAdds[k] =\n              k in spikeAdds ? spikeAdds[k] + parseInt(spk) : parseInt(spk);\n            console.log(\"Sent spikes from IN\", neuron.id, k, spk);\n          }\n        }\n      } else if (neuron.isOutput) {\n        outputTracker.push(neuron.id);\n        if (!(k in spikeAdds)) {\n          spikeAdds[k] = 0;\n        }\n      } else if (neuron.delay == -1 && !neuron.isInput) {\n        draft[neuron.id].delay = 0;\n      }\n    }\n    for (const k in spikeAdds) {\n      //states[k].spikes -= spikeAdds[k]\n      let newSpikes = parseInt(draft[k].spikes.valueOf());\n      newSpikes += spikeAdds[k];\n\n      draft[k].spikes = newSpikes;\n\n      console.log(\"bitstring\", draft[k].bitstring);\n\n      if (draft[k].isOutput) {\n        var newString;\n        if (time == 0) {\n          newString = `${spikeAdds[k] || 0}`;\n        } else {\n          newString = `${draft[k].bitstring},${spikeAdds[k] || 0}`;\n        }\n        draft[k].bitstring = newString;\n      }\n    }\n    console.log(\"should end\", shouldEnd);\n    if (shouldEnd) {\n      handleSimulationEnd();\n    }\n    window.localStorage.setItem(\"shouldTimeStep\", \"1\");\n  });\n  localStorage.setItem(time + \"sec\", JSON.stringify(newStates));\n  return newStates;\n}\n\nexport function null_step(neurons) {\n  const same_state = produce(neurons, (draft) => {\n    console.log(\"new_state\");\n  });\n  return same_state;\n}\n\nexport function backStep(time) {\n  console.log(\"back step automata\");\n  var oldState = JSON.parse(localStorage.getItem(time + \"sec\"));\n  return oldState;\n}\nexport function initialize(neurons) {\n  const states = {};\n  for (const k in neurons) {\n    const neuron = neurons[k];\n    states[k] = initializeState(neuron);\n  }\n  return states;\n}\nexport function initializeState(neuron) {\n  return {\n    spikes: neuron.spikes,\n    delay: 0,\n  };\n}\n","import CytoscapeComponent from \"react-cytoscapejs\";\nimport stylesheet from \"../stylesheet\";\nimport { Button, Container } from \"react-bootstrap\";\nimport useAnimateEdges from \"./useAnimateEdges\";\nimport { useEffect, useMemo } from \"react\";\nimport { convertElements } from \"../../../utils/helpers\";\nimport { canUseRule, parseRule } from \"../../../utils/automata\";\nimport {\n  AlignCenter,\n  Trash,\n  Eye,\n  PencilSquare,\n  XCircle,\n} from \"react-bootstrap-icons\";\nimport \"./popper.css\";\nimport Slider from \"@mui/material/Slider\";\n\nconst Snapse = ({\n  neurons,\n  onEdgeCreate,\n  handleShowDeleteAll,\n  handleChangePosition,\n  setIsClickedSynapse,\n  headless,\n  setNeurons,\n  splitRules,\n  checkIsHover,\n  handleShowEditSynapseModal,\n  handleShowDeleteSynapseModal,\n  time,\n}) => {\n  var isClickedSynapse = false;\n\n  const [cyRef, setCy] = useAnimateEdges();\n  const handleShow = () => {\n    handleShowDeleteAll();\n  };\n\n  function handleCenterGraph() {\n    const cy = cyRef.current;\n\n    if (cy) {\n      cy.center();\n      cy.fit();\n      cy.zoom({\n        level: 0.8,\n        position: { x: 100, y: 100 },\n      });\n    }\n  }\n  const elements = convertElements(neurons);\n\n  useEffect(() => {\n    if (!headless) {\n      const cy = cyRef.current;\n      if (cy) {\n        cy.on(\n          \"mouseup\",\n          \".snapse-node, .snapse-output, .snapse-input\",\n          (evt) => {\n            console.log(\"change position\", evt.target.id());\n            handleChangePosition(evt.position, evt.target.id());\n          }\n        );\n\n        cy.on(\"tap\", function (event) {\n          // target holds a reference to the originator\n          // of the event (core or element)\n          var evtTarget = event.target;\n          var srcID = \".\";\n          var dstID = \".\";\n\n          if (evtTarget == cy) {\n            console.log(\"tap on background\");\n            isClickedSynapse = false;\n            console.log(\"EVT\", cy);\n            setIsClickedSynapse(isClickedSynapse, srcID, dstID);\n          } else if (evtTarget.isNode()) {\n            isClickedSynapse = false;\n            setIsClickedSynapse(isClickedSynapse, srcID, dstID);\n            console.log(\"Tap on NODE\");\n          } else if (evtTarget.isEdge()) {\n            console.log(\"Tap on EDGE\");\n\n            // record edge ID\n            const edgeID = evtTarget.id();\n            console.log(\"Edge ID:\", edgeID);\n            var temp_edgeArr = edgeID.split(\"->\");\n\n            srcID = temp_edgeArr[0];\n            dstID = temp_edgeArr[1];\n\n            isClickedSynapse = true;\n\n            setIsClickedSynapse(isClickedSynapse, srcID, dstID);\n            console.log(\"ISCLICK\", isClickedSynapse, srcID, dstID);\n          }\n        });\n\n        cy.elements().unbind(\"mouseover\");\n        cy.elements().bind(\"mouseover\", (event) => {\n          var checker = Boolean(checkIsHover());\n          console.log(\"checker\", checker);\n\n          if (event.target.isNode() && checker) {\n            console.log(\"Hovering here\", checker);\n            event.target.popperRefObj = event.target.popper({\n              content: () => {\n                let content = document.createElement(\"div\");\n\n                content.classList.add(\"popper-div\");\n\n                setNeurons((draft) => {\n                  let node = draft[event.target.id()];\n\n                  let node_type;\n\n                  if (node.isInput || node.isOutput) {\n                    if (node.isInput) {\n                      node_type = \"Input neuron\";\n                    } else {\n                      node_type = \"Output neuron\";\n                    }\n                    var bitstring = \"<i>None </i>\";\n\n                    if (node.bitstring.length > 1) {\n                      bitstring = node.bitstring;\n                    }\n\n                    content.innerHTML =\n                      \"<b>Node ID: </b>\" +\n                      node.id +\n                      \"<br />\" +\n                      \"<br />\" +\n                      \"<b>Node Type: </b>\" +\n                      node_type +\n                      \"<br />\" +\n                      \"<br />\" +\n                      \"<b>Spike train: </b>\" +\n                      bitstring +\n                      \"<br />\";\n                  } else {\n                    node_type = \"Regular neuron\";\n                    var [spkRules, frgRules] = splitRules(node.rules);\n\n                    // var rules = node.rules.split(' ');\n                    // var validRules = [];\n                    // for (var i = 0; i < rules.length; i++) {\n                    //     var [requires, grouped, symbol, consumes, produces, delay] = parseRule(rules[i], node.id);\n                    //     if (canUseRule(requires, grouped, symbol, node.spikes, consumes)) {\n                    //         validRules.push(rules[i]);\n                    //     }\n                    // }\n\n                    // console.log(\"validRules\", validRules);\n\n                    // var determStr;\n\n                    // if (validRules.length > 1){\n                    //   determStr = \"True\";\n                    // }\n\n                    // else{\n                    //   determStr = \"False\";\n                    // }\n\n                    var strSpkRules, strFrgRules;\n\n                    if (spkRules.length == 0) {\n                      strSpkRules = \"<i> None </i>\";\n                    } else {\n                      strSpkRules = spkRules.join(\"<br> \");\n                    }\n\n                    if (frgRules.length == 0) {\n                      strFrgRules = \"<i> None </i>\";\n                    } else {\n                      strFrgRules = frgRules.join(\"<br> \");\n                    }\n\n                    content.innerHTML =\n                      \"<b>Node ID: </b>\" +\n                      node.id +\n                      \"<br />\" +\n                      \"<br />\" +\n                      \"<b>Node Type: </b>\" +\n                      node_type +\n                      \"<br />\" +\n                      \"<br />\" +\n                      \"<b>Current number of spikes: </b>\" +\n                      node.spikes +\n                      \"<br />\" +\n                      \"<br />\" +\n                      \"<b>Spiking rule/s: </b> <br>\" +\n                      strSpkRules +\n                      \"<br />\" +\n                      \"<br />\" +\n                      \"<b>Forgetting rule/s: </b> <br>\" +\n                      strFrgRules +\n                      \"<br />\";\n                    // + \"<br />\" + \"<b>Non-deterministic: </b>\" + determStr + \"<br />\";\n                  }\n                });\n\n                document.body.appendChild(content);\n\n                return content;\n              },\n            });\n          } else if (event.target.isEdge() && checker) {\n            console.log(\"HOVERING EDGE\");\n            event.target.popperRefObj = event.target.popper({\n              content: () => {\n                let content = document.createElement(\"div\");\n\n                content.classList.add(\"popper-div\");\n\n                const edgeID = event.target.id();\n                console.log(edgeID);\n                var edge_ID_arr = edgeID.split(\"->\");\n                var src = edge_ID_arr[0];\n                var dst = edge_ID_arr[1];\n\n                setNeurons((draft) => {\n                  var weightsDict = { ...draft[src].outWeights };\n                  var synapse_weight = parseInt(weightsDict[dst]);\n\n                  content.innerHTML =\n                    \"<b>Synapse ID: </b>\" +\n                    edgeID +\n                    \"<br />\" +\n                    \"<br />\" +\n                    \"<b>Source Node: </b>\" +\n                    src +\n                    \"<br />\" +\n                    \"<br />\" +\n                    \"<b>Destination Node: </b>\" +\n                    dst +\n                    \"<br />\" +\n                    \"<br />\" +\n                    \"<b>Synapse Weight: </b>\" +\n                    synapse_weight +\n                    \"<br />\";\n                });\n\n                document.body.appendChild(content);\n\n                return content;\n              },\n            });\n          }\n        });\n\n        cy.elements().unbind(\"mouseout\");\n        cy.elements().bind(\"mouseout\", (event) => {\n          var checker = Boolean(checkIsHover());\n          if ((event.target.isNode() || event.target.isEdge()) && checker) {\n            if (event.target.popper) {\n              event.target.popperRefObj.state.elements.popper.remove();\n              event.target.popperRefObj.destroy();\n            }\n          }\n        });\n\n        cy.gridGuide({\n          guidelinesStyle: {\n            strokeStyle: \"black\",\n            horizontalDistColor: \"#ff0000\",\n            verticalDistColor: \"green\",\n            initPosAlignmentColor: \"#0000ff\",\n          },\n        });\n        cy.edgehandles({\n          handleNodes: \".snapse-node, .snapse-node__closed, .snapse-input\",\n          preview: false,\n          loopAllowed: () => false,\n          edgeType: function (sourceNode, targetNode) {\n            return \"flat\";\n            //return sourceNode.edgesTo(targetNode).empty() ? 'flat' : undefined\n          },\n          complete: onEdgeCreate,\n        });\n      }\n    }\n  }, [cyRef, headless]);\n  return headless ? (\n    <div id=\"cyHeadless\"></div>\n  ) : (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n    >\n      <Button\n        className=\"center-graph-button\"\n        variant=\"secondary\"\n        onClick={handleCenterGraph}\n      >\n        <AlignCenter /> Center Graph\n      </Button>{\" \"}\n      <Button\n        variant=\"success\"\n        size=\"md\"\n        id=\"edit-syn-btn\"\n        className=\"node-actions\"\n        onClick={handleShowEditSynapseModal}\n        style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n        disabled={time > 0 ? true : false}\n      >\n        <PencilSquare /> Edit Synapse\n      </Button>\n      <Button\n        variant=\"warning\"\n        size=\"md\"\n        id=\"del-syn-btn\"\n        className=\"node-actions\"\n        onClick={handleShowDeleteSynapseModal}\n        style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n        disabled={time > 0 ? true : false}\n      >\n        <XCircle /> Delete Synapse\n      </Button>\n      <Button\n        id=\"clear-all-btn\"\n        style={{ float: \"right\" }}\n        variant=\"danger\"\n        onClick={handleShow}\n      >\n        <Trash /> Clear All\n      </Button>\n      <CytoscapeComponent\n        cy={setCy}\n        wheelSensitivity={0.3}\n        elements={CytoscapeComponent.normalizeElements(elements)}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n        }}\n        stylesheet={stylesheet}\n      />\n    </div>\n  );\n};\n\nexport default Snapse;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useEffect, useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\n\nconst ElementPopUp = ({\n  showElementPopup,\n  handleCloseElementPopup,\n  handleError,\n  nodeID,\n  nodeType,\n  nodeSRules,\n  nodeFRules,\n  nodeSpikes,\n  nodeBitstring,\n}) => {\n  const [rules, setRules] = useState(\"\");\n  const [startingSpikes, setStartingSpikes] = useState(0);\n  const handleClose = () => {\n    //console.log(neuronId, rules, startingSpikes);\n    handleCloseElementPopup();\n  };\n\n  if (nodeType == \"Input\") {\n    return (\n      <Modal show={showElementPopup} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Input Node Details</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <b>Spike train:</b> {nodeBitstring}\n        </Modal.Body>\n      </Modal>\n    );\n  } else if (nodeType == \"Output\") {\n    return (\n      <Modal show={showElementPopup} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Output Node Details</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <b>Spike train:</b> {nodeBitstring}\n        </Modal.Body>\n      </Modal>\n    );\n  } else {\n    return (\n      <Modal show={showElementPopup} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Node Details</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <b>Node ID:</b> {nodeID}\n        </Modal.Body>\n        <Modal.Body>\n          <b>Type:</b> {nodeType} Neuron\n        </Modal.Body>\n        <Modal.Body>\n          <b>Current number of spikes:</b> {nodeSpikes}\n        </Modal.Body>\n        <Modal.Body>\n          <b>Spiking Rules:</b> {nodeSRules}\n        </Modal.Body>\n        <Modal.Body>\n          <b>Forgetting Rules:</b> {nodeFRules}\n        </Modal.Body>\n      </Modal>\n    );\n  }\n};\nexport default ElementPopUp;\n","import { useEffect, useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { useImmer } from \"use-immer\";\n\nconst ChooseRuleForm = ({\n  showChooseRuleModal,\n  handleCloseChooseRuleModal,\n  rules,\n  handleChosenRules,\n}) => {\n  const [values, setValues] = useImmer({});\n  useEffect(() => {\n    setValues((currentValues) => {\n      for (var k in rules) {\n        currentValues[k] = rules[k][0];\n      }\n    });\n  }, [rules]);\n  function onSubmit(e) {\n    e.preventDefault();\n    handleChosenRules(values);\n  }\n  function handleSelectChange(event, neuronId) {\n    setValues((currentValues) => {\n      for (var k in currentValues) {\n        if (k == neuronId) {\n          currentValues[k] = event.target.value;\n        }\n      }\n    });\n  }\n  const GroupRules = (label, options) => {\n    let neuronOptions = options.map((neuron) => (\n      <option value={neuron} key={neuron}>\n        {neuron}\n      </option>\n    ));\n    return (\n      <Form.Group>\n        <Form.Label>{label}</Form.Label>\n        <Form.Control\n          as=\"select\"\n          value={values[label]}\n          onChange={(event) => handleSelectChange(event, label)}\n        >\n          {neuronOptions}\n        </Form.Control>\n      </Form.Group>\n    );\n  };\n  var ruleList = Object.keys(rules);\n  var form = [];\n  for (var i = 0; i < ruleList.length; i++) {\n    console.log(i);\n    form.push(GroupRules(ruleList[i], rules[ruleList[i]], handleSelectChange));\n  }\n  return (\n    <Modal\n      show={showChooseRuleModal}\n      onHide={handleCloseChooseRuleModal}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header>\n        <Modal.Title>Choose Rule Form</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={onSubmit}>\n          {form}\n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default ChooseRuleForm;\n","import {\n  Button,\n  Form,\n  Modal,\n  OverlayTrigger,\n  Tooltip,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport { QuestionCircle } from \"react-bootstrap-icons\";\nimport { useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst renderTooltip = (props) => (\n  <Tooltip id=\"button-tooltip\" style={{ width: \"300px\" }} {...props}>\n    <p>\n      <b>Expression</b>: a<sup>i</sup>(a<sup>j</sup>)<sup>*</sup>, where i and j\n      cannot both be 0.\n      <br />\n      <b>Invalid Input</b>:<br />\n      a/a-&gt;1;1, a^2/a-&gt;a;1,\n      <br /> (a)a/a-&gt;a;1 <br />\n      <b>Valid Input</b>:<br />\n      a/a-&gt;a;1, 2a/a-&gt;a;1,\n      <br /> (2a)*/a-&gt;a;1\n    </p>\n  </Tooltip>\n);\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id: \"\",\n      startingSpikes: 0,\n      rules: \"\",\n    };\n  }\n  return {\n    ...state,\n    [event.name]: event.value,\n  };\n};\n\nconst initialFormState = { id: \"\", rules: \"\", startingSpikes: 0 };\n\nconst NewNodeForm = ({\n  showNewNodeModal,\n  handleCloseModal,\n  handleNewNode,\n  handleError,\n}) => {\n  const handleClose = () => {\n    handleCloseModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = (event) => {\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n\n    // Add function that changes i and j to rules\n\n    if (allRulesValid(formData.rules)) {\n      console.log(\"All rules valid\");\n      handleClose();\n      setSubmitting(true);\n\n      setTimeout(() => {\n        setSubmitting(false);\n        setFormData({\n          reset: true,\n        });\n      }, 3000);\n      const newNeuron = {\n        id: newId,\n        position: { x: 100, y: 100 },\n        rules: formData.rules,\n        startingSpikes: parseInt(formData.startingSpikes),\n        delay: 0,\n        spikes: parseInt(formData.startingSpikes),\n        isOutput: false,\n        isInput: false, // check if Input node\n        out: [],\n        outWeights: {}, // dict of weights for each synapse\n      };\n      handleNewNode(newNeuron);\n    } else {\n      console.log(\"One or more of the rules is invalid\");\n      handleError(\"One or more of the rules is invalid\");\n      handleClose();\n    }\n  }\n\n  return (\n    <Modal show={showNewNodeModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit} data-testid=\"new-node-form\">\n          <Form.Group>\n            <Form.Label htmlFor=\"node-name\">Node Name</Form.Label>\n            <Form.Control\n              required\n              id=\"node-name\"\n              name=\"id\"\n              type=\"text\"\n              placeholder=\"n0\"\n              value={formData.id}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"node-rules\">Node Rules</Form.Label>\n            <OverlayTrigger\n              placement=\"right\"\n              delay={{ show: 250, hide: 400 }}\n              overlay={renderTooltip}\n            >\n              <QuestionCircle style={{ \"padding-left\": \"5px\" }} />\n            </OverlayTrigger>\n            <Form.Control\n              id=\"node-rules\"\n              required\n              name=\"rules\"\n              type=\"text\"\n              placeholder=\"a/a->a;0 aa/a->a;1\"\n              value={formData.rules}\n              onChange={handleChange}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter valid rules only. Separate each rule with a space.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"starting-spikes\">\n              Starting Spike Number\n            </Form.Label>\n            <Form.Control\n              id=\"starting-spikes\"\n              required\n              name=\"startingSpikes\"\n              type=\"number\"\n              min=\"0\"\n              value={formData.startingSpikes}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            data-testid=\"new-node-submit-button\"\n          >\n            Save Changes\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default NewNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id: \"\",\n    };\n  }\n  return {\n    ...state,\n    [event.name]: event.value,\n  };\n};\n\nconst initialFormState = { id: \"\" };\n\nconst AddSynapseWeightForm = ({\n  showAddWeightModal,\n  handleCloseAddWeightModal,\n  handleAddWeight,\n  handleError,\n  srce,\n  dest,\n}) => {\n  const handleClose = () => {\n    handleAddWeight(srce, dest, 1);\n    handleCloseAddWeightModal();\n  };\n  const [neuronId, setNeuronId] = useState(\"\"); //\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = (event) => {\n    console.log(event.target.value);\n    console.log(event.target.name);\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    const weight = parseInt(formData.weight);\n    console.log(\"SOURCE\", srce);\n    console.log(\"DEST\", dest);\n    console.log(\"weight\", weight);\n    handleClose();\n    // let newId = `${formData.id}-${shortid.generate()}`;\n    //   handleClose();\n    setSubmitting(true);\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 3000);\n    //   const newOutput = {\n    //     id: newId,\n    //     position: { x: 300, y: 300 },\n    //     isOutput: true,\n    //     spikes: 0,\n    //     bitstring: ' '\n    //   }\n    handleAddWeight(srce, dest, weight, 0);\n  }\n\n  return (\n    <Modal show={showAddWeightModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Add Synapse Weight</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>\n              Weight of the Synapse between {srce} and {dest}:\n            </Form.Label>\n            <Form.Control\n              required\n              name=\"weight\"\n              type=\"number\"\n              placeholder={1}\n              min={1}\n              value={formData.weight}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button type=\"submit\" variant=\"primary\">\n            Save Changes\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default AddSynapseWeightForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id: \"\",\n    };\n  }\n  return {\n    ...state,\n    [event.name]: event.value,\n  };\n};\n\nconst initialFormState = { id: \"\" };\n\nconst NewOutputNodeForm = ({\n  showNewOutputModal,\n  handleCloseNewOutputModal,\n  handleNewOutput,\n  handleError,\n}) => {\n  const handleClose = () => {\n    handleCloseNewOutputModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = (event) => {\n    console.log(event.target.value);\n    console.log(event.target.name);\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n    handleClose();\n    setSubmitting(true);\n\n    setTimeout(() => {\n      setSubmitting(false);\n      setFormData({\n        reset: true,\n      });\n    }, 3000);\n    const newOutput = {\n      id: newId,\n      position: { x: 300, y: 300 },\n      isOutput: true,\n      spikes: 0,\n      bitstring: \" \",\n    };\n    handleNewOutput(newOutput);\n  }\n\n  return (\n    <Modal show={showNewOutputModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Output Node Name</Form.Label>\n            <Form.Control\n              required\n              name=\"id\"\n              type=\"text\"\n              placeholder=\"n0\"\n              value={formData.id}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button type=\"submit\" variant=\"primary\">\n            Save Changes\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default NewOutputNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id: \"\",\n    };\n  }\n  return {\n    ...state,\n    [event.name]: event.value,\n  };\n};\n\nconst initialFormState = { id: \"\" };\n\nconst NewInputNodeForm = ({\n  showNewInputModal,\n  handleCloseNewInputModal,\n  handleNewInput,\n  handleError,\n}) => {\n  const handleClose = () => {\n    handleCloseNewInputModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = (event) => {\n    console.log(event.target.value);\n    console.log(event.target.name);\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n    handleClose();\n    setSubmitting(true);\n\n    setTimeout(() => {\n      setSubmitting(false);\n      setFormData({\n        reset: true,\n      });\n    }, 3000);\n    const newInput = {\n      id: newId,\n      position: { x: 300, y: 300 },\n      isInput: true,\n      isOutput: false,\n      spikes: 0,\n      delay: 0,\n      out: [],\n      bitstring: formData.bitstring,\n      outWeights: {},\n    };\n    handleNewInput(newInput);\n  }\n\n  return (\n    <Modal show={showNewInputModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Input Node Name</Form.Label>\n            <Form.Control\n              required\n              name=\"id\"\n              type=\"text\"\n              placeholder=\"n0\"\n              value={formData.id}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label> Bitstring/Spike Train</Form.Label>\n            <Form.Control\n              required\n              name=\"bitstring\"\n              type=\"text\"\n              placeholder=\"1,0,1\"\n              value={formData.bitstring}\n              onChange={handleChange}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter spike train. Separate spikes with <b>commas</b> with{\" \"}\n              <b>NO space in between</b> (e. g. <b>1,0,1,1</b>).v\n            </Form.Text>\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button type=\"submit\" variant=\"primary\">\n            Save Changes\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default NewInputNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useEffect, useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\n\nconst EditNodeForm = ({\n  showEditModal,\n  handleCloseEditModal,\n  handleEditNode,\n  handleError,\n  neurons,\n}) => {\n  const [neuronId, setNeuronId] = useState(\"\");\n  const [rules, setRules] = useState(\"\");\n  const [startingSpikes, setStartingSpikes] = useState(0);\n  const handleClose = () => {\n    setNeuronId(null);\n    setRules(null);\n    setStartingSpikes(null);\n    //console.log(neuronId, rules, startingSpikes);\n    handleCloseEditModal();\n  };\n  useEffect(() => {\n    firstUpdate();\n  }, []);\n  function firstUpdate() {\n    var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n      if (!neurons[e].isOutput && !neurons[e].isInput) r[e] = neurons[e];\n      return r;\n    }, {});\n    //var keys = Object.keys(filteredObject);\n    //setNeuronId(keys[0]);\n    //setRules(filteredObject[keys[0]].rules);\n    //setStartingSpikes(filteredObject[keys[0]].startingSpikes);\n  }\n  var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n    if (!neurons[e].isOutput && !neurons[e].isInput) r[e] = neurons[e];\n\n    return r;\n  }, {});\n  let neuronOptions = Object.keys(filteredObject).map((neuron) => (\n    <option value={neuron} key={neuron}>\n      {neuron}\n    </option>\n  ));\n\n  function handleSelectChange(event) {\n    let id = event.target.value;\n\n    setNeuronId(id);\n    setRules(neurons[id].rules);\n    setStartingSpikes(neurons[id].startingSpikes);\n  }\n  function handleSubmit(event) {\n    console.log(neuronId, rules, startingSpikes);\n    event.preventDefault();\n    console.log(neuronId, rules, startingSpikes);\n    if (!neuronId || neuronId == \"-1\") {\n      handleError(\"Please select a node to edit\");\n      return;\n    } else {\n      if (allRulesValid(rules)) {\n        console.log(\"All rules valid\");\n        handleClose();\n        handleEditNode(neuronId, rules, startingSpikes);\n      } else {\n        console.log(\"One or more of the rules is invalid\");\n        handleError(\"One or more of the rules is invalid\");\n      }\n    }\n  }\n\n  return (\n    <Modal show={showEditModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Regular Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n          <Form.Group>\n            <Form.Label>Node</Form.Label>\n            <Form.Control\n              required\n              data-testid=\"select-option\"\n              as=\"select\"\n              defaultValue={-1}\n              onChange={handleSelectChange}\n            >\n              <option disabled value={-1} key={-1}>\n                Select a node\n              </option>\n              {neuronOptions}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"node-rules\">Node Rules</Form.Label>\n            <Form.Control\n              id=\"node-rules\"\n              required\n              name=\"rules\"\n              type=\"text\"\n              placeholder=\"a/a->a;0 aa/a->a;1\"\n              value={rules}\n              onChange={(event) => {\n                setRules(event.target.value);\n              }}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter valid rules only. Separate each rule with a space.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"startingSpikes\">\n              Starting Spike Number\n            </Form.Label>\n            <Form.Control\n              id=\"startingSpikes\"\n              required\n              name=\"startingSpikes\"\n              type=\"number\"\n              min=\"0\"\n              placeholder=\"0\"\n              value={startingSpikes}\n              onChange={(event) => setStartingSpikes(event.target.value)}\n            />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            data-testid=\"edit-node-submit-button\"\n          >\n            Save Changes\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default EditNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useEffect, useReducer, useState, Text } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\nimport { setUseProxies } from \"immer\";\n\nconst EditInputNodeForm = ({\n  showEditInputModal,\n  handleCloseEditInputModal,\n  handleEditInputNode,\n  handleError,\n  neurons,\n}) => {\n  const [neuronId, setNeuronId] = useState(\"\");\n  const [spikeTrain, setSpikeTrain] = useState(\"\");\n\n  const handleClose = () => {\n    setSpikeTrain(null);\n    setNeuronId(null);\n    //console.log(neuronId, rules, startingSpikes);\n    handleCloseEditInputModal();\n  };\n  useEffect(() => {\n    firstUpdate();\n  }, []);\n  function firstUpdate() {\n    var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n      if (neurons[e].isInput) r[e] = neurons[e];\n      return r;\n    }, {});\n  }\n  var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n    if (neurons[e].isInput) r[e] = neurons[e];\n\n    return r;\n  }, {});\n  let neuronOptions = Object.keys(filteredObject).map((neuron) => (\n    <option value={neuron} key={neuron}>\n      {neuron}\n    </option>\n  ));\n\n  function handleSelectChange(event) {\n    let id = event.target.value;\n    setNeuronId(id);\n    setSpikeTrain(neurons[id].bitstring);\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (!neuronId || neuronId == \"-1\") {\n      handleError(\"Please select a node to edit!\");\n      return;\n    } else {\n      handleClose();\n      handleEditInputNode(neuronId, spikeTrain);\n    }\n  }\n\n  return (\n    <Modal show={showEditInputModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Input Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n          <Form.Group>\n            <Form.Label>Node</Form.Label>\n            <Form.Control\n              required\n              data-testid=\"select-option\"\n              as=\"select\"\n              defaultValue={-1}\n              onChange={handleSelectChange}\n            >\n              <option disabled value={-1} key={-1}>\n                Select an input node\n              </option>\n              {neuronOptions}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Bitstring/Spike Train</Form.Label>\n            <Form.Control\n              id=\"spikeTrain\"\n              required\n              name=\"spikeTrain\"\n              type=\"text\"\n              placeholder=\"1,0,1\"\n              value={spikeTrain}\n              onChange={(event) => {\n                setSpikeTrain(event.target.value);\n              }}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter spike train. Separate spikes with <b>commas</b> with{\" \"}\n              <b>NO space in between</b> (e. g. <b>1,0,1,1</b>).\n            </Form.Text>\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            data-testid=\"edit-node-submit-button\"\n          >\n            Save Changes\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default EditInputNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useEffect, useReducer, useState, Text } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\nimport { setUseProxies } from \"immer\";\n\nconst EditSynapseForm = ({\n  showEditSynapseModal,\n  handleCloseEditSynapseModal,\n  handleEditSynapse,\n  handleError,\n  neurons,\n  isClickedSynapse,\n  srcID,\n  dstID,\n  setWeight,\n  weight_main,\n  setNeurons,\n  handleDeleteSynapse,\n}) => {\n  const handleClose = () => {\n    if (isClickedSynapse) {\n      setWeight(weight_main);\n    } else {\n      setWeight(1);\n    }\n\n    handleCloseEditSynapseModal();\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (!isClickedSynapse) {\n      handleError(\"Please click a synapse to edit\");\n      return;\n    } else {\n      handleClose();\n      setTimeout(() => {}, 3000);\n\n      if (weight_main == 0) {\n        setNeurons((draft) => {\n          var weightsDict = { ...draft[srcID].outWeights };\n          weightsDict[dstID] = 1;\n          draft[srcID].outWeights = weightsDict;\n          handleDeleteSynapse(srcID, dstID);\n        });\n      } else {\n        handleEditSynapse(srcID, dstID, weight_main);\n      }\n    }\n  }\n\n  var currWeight;\n\n  if (isClickedSynapse && neurons[srcID]) {\n    setNeurons((draft) => {\n      var weightsDict = { ...draft[srcID].outWeights };\n      currWeight = parseInt(weightsDict[dstID]);\n    });\n  } else {\n    setWeight(1);\n    currWeight = 1;\n  }\n\n  if (isClickedSynapse) {\n    return (\n      <Modal show={showEditSynapseModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Clicked Synapse</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n            <Form.Group>\n              <Form.Label>\n                Selected Synapse: {srcID}-&gt;{dstID}\n              </Form.Label>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>\n                Source Node: <b>{srcID}</b>\n              </Form.Label>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>\n                Destination Node: <b>{dstID}</b>\n              </Form.Label>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label htmlFor=\"synapse-weight\">Synapse Weight</Form.Label>\n              <Form.Control\n                id=\"synapse-weight\"\n                required\n                name=\"weight\"\n                type=\"number\"\n                min=\"0\"\n                placeholder={currWeight}\n                value={weight_main}\n                onChange={(event) => {\n                  setWeight(event.target.value);\n                }}\n              />\n              <Form.Text className=\"text-muted\">\n                Enter any <b>nonnegative integer</b>.\n              </Form.Text>\n            </Form.Group>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>{\" \"}\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              data-testid=\"edit-node-submit-button\"\n            >\n              Save Changes\n            </Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    );\n  } else {\n    return (\n      <Modal show={showEditSynapseModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Clicked Synapse</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n            <Form.Group>\n              <Form.Label>\n                <b>NO SELECTED SYNAPSE! Please click a synapse to edit.</b>\n              </Form.Label>\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n};\nexport default EditSynapseForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\n\nconst DeleteNodeForm = ({\n  showDeleteModal,\n  handleCloseDeleteModal,\n  handleDeleteNode,\n  handleError,\n  neurons,\n}) => {\n  const [neuronId, setNeuronId] = useState(\"\");\n  const handleClose = () => {\n    handleCloseDeleteModal();\n  };\n  let neuronOptions = Object.keys(neurons).map((neuron) => (\n    <option value={neuron} key={neuron}>\n      {neuron}\n    </option>\n  ));\n\n  let defaultNeuron = Object.keys(neurons)[0];\n  function handleSelectChange(event) {\n    setNeuronId(event.target.value);\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (neuronId !== \"\") {\n      handleClose();\n      handleDeleteNode(neuronId);\n    } else {\n      handleClose();\n      handleDeleteNode(defaultNeuron);\n    }\n  }\n\n  return (\n    <Modal show={showDeleteModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Delete Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Select node to delete</Form.Label>\n            <Form.Control\n              as=\"select\"\n              defaultValue={-1}\n              onChange={handleSelectChange}\n            >\n              <option disabled value={-1} key={-1}>\n                Select a node\n              </option>\n              {neuronOptions}\n            </Form.Control>\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>{\" \"}\n          <Button type=\"submit\" variant=\"danger\">\n            Delete neuron\n          </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default DeleteNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useReducer, useState } from \"react\";\nimport { allRulesValid } from \"../../../utils/helpers\";\n\nconst DeleteNodeForm = ({\n  showDeleteAllModal,\n  handleCloseDeleteAllModal,\n  handleDeleteAll,\n  handleError,\n}) => {\n  const [neuronId, setNeuronId] = useState(\"\");\n  const handleClose = () => {\n    handleCloseDeleteAllModal();\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    handleClose();\n    setTimeout(() => {\n      setNeuronId(\"\");\n    }, 3000);\n\n    handleDeleteAll();\n  }\n\n  return (\n    <Modal show={showDeleteAllModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Clear All</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>\n              Are you sure you want to delete all elements?\n            </Form.Label>\n          </Form.Group>\n          <Button type=\"submit\" variant=\"danger\">\n            YES\n          </Button>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            NO\n          </Button>{\" \"}\n        </Form>\n      </Modal.Body>\n    </Modal>\n  );\n};\nexport default DeleteNodeForm;\n","import { Button, Form, Modal } from \"react-bootstrap\";\nimport { useReducer, useState } from \"react\";\nimport { SynapseRulesValid } from \"../../../utils/helpers\";\n\nconst DeleteSynapseForm = ({\n  showDeleteSynapseModal,\n  handleCloseDeleteSynapseModal,\n  handleDeleteSynapse,\n  handleError,\n  setNeurons,\n  isClickedSynapse,\n  srcID,\n  dstID,\n}) => {\n  const handleClose = () => {\n    handleCloseDeleteSynapseModal();\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    handleClose();\n    setTimeout(() => {}, 3000);\n\n    setNeurons((draft) => {\n      var weightsDict = { ...draft[srcID].outWeights };\n      weightsDict[dstID] = 1;\n      draft[srcID].outWeights = weightsDict;\n      handleDeleteSynapse(srcID, dstID);\n    });\n  }\n\n  if (isClickedSynapse) {\n    return (\n      <Modal show={showDeleteSynapseModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Synapse</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSubmit}>\n            <Form.Group>\n              <Form.Label>\n                Are you sure you want to delete this synapse with source{\" \"}\n                <b>{srcID}</b> and destination <b>{dstID}</b>?\n              </Form.Label>\n            </Form.Group>\n            <Button type=\"submit\" variant=\"danger\">\n              YES\n            </Button>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              NO\n            </Button>{\" \"}\n          </Form>\n        </Modal.Body>\n      </Modal>\n    );\n  } else {\n    return (\n      <Modal show={showDeleteSynapseModal} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Delete Clicked Synapse</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n            <Form.Group>\n              <Form.Label>\n                <b>NO SELECTED SYNAPSE! Please click a synapse to delete.</b>\n              </Form.Label>\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n};\nexport default DeleteSynapseForm;\n","import { Table, Modal } from \"react-bootstrap\";\nimport \"./ChoiceHistory.css\";\nconst ChoiceHistory = ({\n  time,\n  showChoiceHistoryModal,\n  handleCloseHoiceHistoryModal,\n}) => {\n  var getLatestState = JSON.parse(localStorage.getItem(time - 1 + \"sec\"));\n  var neuronIds = <td>There are no neurons</td>;\n  if (getLatestState) {\n    neuronIds = Object.keys(getLatestState).map((neuron) => (\n      <th className=\"choice-history-header\" key={neuron}>{`${\n        neuron.includes(\"-\") ? neuron.substr(0, neuron.indexOf(\"-\")) : neuron\n      }`}</th>\n    ));\n  }\n\n  var neuronRows = [];\n\n  for (var i = 0; i < time; i++) {\n    var neuronCells = [];\n    neuronCells.push(<td className=\"time\"> {i} </td>);\n    var state = JSON.parse(localStorage.getItem(i + \"sec\"));\n    for (var k in state) {\n      if (state[k].chosenRule) {\n        neuronCells.push(TableCell(state[k].chosenRule.replace(/->/g, \"→\")));\n      } else if (state[k].isOutput) {\n        neuronCells.push(\n          TableCell(\n            `${\n              typeof state[k].bitstring === \"string\"\n                ? state[k].bitstring.replace(/\\[object Object\\]/g, \"\")\n                : \"\"\n            }`\n          )\n        );\n      } else {\n        neuronCells.push(TableCell(\"No applicable rule.\"));\n      }\n    }\n    neuronRows.push(TableRow(neuronCells, i));\n    neuronCells = [];\n  }\n  return (\n    <Modal\n      show={showChoiceHistoryModal}\n      onHide={handleCloseHoiceHistoryModal}\n      className=\"custom-choice-history-modal\"\n      size=\"lg\"\n    >\n      <Table\n        className=\"choicehistory\"\n        striped\n        bordered\n        hover\n        data-testid=\"choice-history-table\"\n      >\n        <thead>\n          <tr>\n            <th className=\"headtime\">Time</th>\n            {neuronIds}\n          </tr>\n        </thead>\n        <tbody>{neuronRows}</tbody>\n      </Table>\n    </Modal>\n  );\n};\n\nconst TableCell = (content) => {\n  return <td>{content}</td>;\n};\n\nconst TableRow = (content, i) => {\n  return <tr key={\"time-\" + i}>{content}</tr>;\n};\n\nexport default ChoiceHistory;\n","import { useEffect, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nconst useUnsavedChanges = () => {\n  const [isDirty, setDirty] = useState(false);\n  const message = \"Are you sure you want to exit without saving your system?\";\n  useEffect(() => {\n    // function handleUnsavedChanges (){\n    //     console.log(\"isDirty:\" + isDirty);\n    // }\n    window.onbeforeunload = isDirty && (() => message);\n\n    //window.addEventListener(\"beforeunload\", handleUnsavedChanges);\n    return () => {\n      //window.removeEventListener(\"beforeunload\", handleUnsavedChanges);\n      window.onbeforeunload = null;\n    };\n  }, [isDirty]);\n  const routerPrompt = <Prompt when={isDirty} message={message} />;\n  return [routerPrompt, () => setDirty(true), () => setDirty(false)];\n};\nexport default useUnsavedChanges;\n","import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nimport Slider from \"@mui/material/Slider\";\nimport {\n  Button,\n  Container,\n  Alert,\n  Row,\n  Col,\n  Form,\n  OverlayTrigger,\n  Tooltip,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\nimport {\n  ArrowCounterclockwise,\n  PlayFill,\n  PauseFill,\n  SkipForwardFill,\n  SkipBackwardFill,\n  QuestionCircle,\n  ClockFill,\n  ClockHistory,\n  PlusSquare,\n  Save2,\n  Sliders,\n  XCircle,\n  PencilSquare,\n  BoxArrowRight,\n  BoxArrowInRight,\n} from \"react-bootstrap-icons\";\nimport styled, { css, keyframes } from \"styled-components\";\n\nvar progBarRate = 3;\n\nfunction MainHeader(props) {\n  const [sld_value, setSldValue] = useState(1);\n\n  const renderTooltip = (props) => (\n    <Tooltip id=\"button-tooltip\" {...props}>\n      Pseudorandom mode will allow the system to decide which rule will be\n      executed. Guided mode will let you be the one to decide.\n    </Tooltip>\n  );\n\n  const handleSelect = (e) => {\n    console.log(e);\n    props.setMode(e);\n  };\n\n  const handlePlay = () => {\n    if (!props.hasEnded) {\n      props.setIsPlaying((p) => !p);\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  };\n\n  const onNullForward = async () => {\n    if (props.time == 0) {\n      //copy\n      console.log(\"NULL_FORWARD\");\n\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(JSON.parse(JSON.stringify(props.neurons)))\n      );\n    }\n  };\n\n  const handleSldChange = (event, newValue) => {\n    if (props.isPlaying) {\n      props.setIsPlaying(false);\n    }\n    setSldValue(newValue);\n    var sim_spd = 3000 / newValue;\n    progBarRate = sim_spd / 1000;\n  };\n\n  function resetSlider() {\n    if (props.isPlaying) {\n      props.setIsPlaying(false);\n    }\n    setSldValue(1);\n  }\n\n  useEffect(() => {\n    var simu_speed = 3000 / sld_value;\n    progBarRate = simu_speed / 1000;\n    console.log(\"Simu speed\", simu_speed);\n    if (props.isPlaying) {\n      var interval = setInterval(() => {\n        props.onIntervalStepRef.current();\n      }, simu_speed); /// simulation speed\n    }\n    return () => clearInterval(interval);\n  }, [props.isPlaying, props.onIntervalStepRef]);\n\n  return (\n    <div>\n      <div style={{ textAlign: \"center\" }}>\n        <h1 style={{ fontWeight: \"700\" }} className=\"websnapse-title\">\n          WebSnapse\n        </h1>\n      </div>\n\n      <Row>\n        <Col>\n          <div>\n            <Form>\n              <Form.Group id=\"formGridCheckbox\">\n                <Row>\n                  <Col sm={8}>\n                    <div>\n                      <DropdownButton\n                        id=\"simu-mode\"\n                        title={\"Simulation Mode: \" + props.mode}\n                        onSelect={handleSelect}\n                      >\n                        <Dropdown.Item\n                          eventKey=\"GUIDED\"\n                          onClick={() => props.setIsRandom(false)}\n                        >\n                          GUIDED\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          eventKey=\"PSEUDORANDOM\"\n                          onClick={() => props.setIsRandom(true)}\n                        >\n                          PSEUDORANDOM\n                        </Dropdown.Item>\n                      </DropdownButton>\n                    </div>\n\n                    {/* <Form.Check type=\"checkbox\"\n                              label=\"Pseudorandom Mode\"\n                              defaultChecked={isRandom}\n                              onChange={() => {\n                                setIsRandom(!isRandom)\n                              }} /> */}\n                  </Col>\n                  {/* Question Mark Tooltip for Simulation Mode */}\n                  <Col sm={8} style={{ textAlign: \"left\" }}>\n                    <OverlayTrigger\n                      placement=\"right\"\n                      delay={{ show: 250, hide: 400 }}\n                      overlay={renderTooltip}\n                    >\n                      <QuestionCircle />\n                    </OverlayTrigger>\n                  </Col>\n                </Row>\n              </Form.Group>\n            </Form>\n            {props.time == 0 ? (\n              <div></div>\n            ) : (\n              <div\n                style={{\n                  backgroundColor: \"#778beb\",\n                  color: \"white\",\n                  borderRadius: \"10px\",\n                  padding: \"0.5em\",\n                }}\n              >\n                <ClockFill color=\"white\" size={30} /> <strong>Time:</strong>{\" \"}\n                {props.time == 0 ? \"Start playing!\" : props.time}\n              </div>\n            )}\n          </div>\n        </Col>\n        {/* Simulation Controls */}\n        <Col>\n          <div\n            className=\"snapse-controls\"\n            style={{ textAlign: \"center\", marginBottom: \"0.8em\" }}\n          >\n            <Button variant=\"link\" onClick={() => props.onBackward()}>\n              <SkipBackwardFill />\n            </Button>{\" \"}\n            <div style={{ display: \"inline-block\" }}>\n              <ProgressBar key={props.pBar} isPlaying={props.isPlaying} />\n              <Button\n                size=\"lg\"\n                className=\"snapse-controls-play\"\n                onClick={handlePlay}\n              >\n                {props.isPlaying ? <PauseFill /> : <PlayFill />}\n              </Button>\n            </div>{\" \"}\n            <Button variant=\"link\" onClick={() => props.onForward()}>\n              <SkipForwardFill />\n            </Button>{\" \"}\n            <Button\n              hidden={true}\n              id=\"forwardBtn\"\n              variant=\"link\"\n              onClick={() => onNullForward()}\n            >\n              <SkipForwardFill />\n            </Button>{\" \"}\n          </div>\n        </Col>\n\n        {/* Speed Slider */}\n        <Col style={{ textAlign: \"right\" }}>\n          <div\n            id=\"speed-slider\"\n            style={{\n              backgroundColor: \"#786fa6\",\n              borderRadius: \"10px\",\n              padding: \"0.5em\",\n            }}\n          >\n            <h6 className=\"slider-title\" style={{ textAlign: \"center\" }}>\n              <Sliders /> Simulation Speed\n              <Button\n                size=\"sm\"\n                variant=\"light\"\n                style={{ float: \"right\" }}\n                onClick={resetSlider}\n              >\n                Reset to 1x\n              </Button>{\" \"}\n            </h6>\n\n            <Slider\n              aria-label=\"simuSpeed\"\n              color=\"secondary\"\n              min={0.1}\n              max={3.0}\n              step={0.1}\n              defaultValue={1}\n              value={sld_value}\n              onChange={handleSldChange}\n              valueLabelDisplay=\"auto\"\n              valueLabelFormat={sliderThumbLabelFormat}\n            />\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\nconst shortening = keyframes`\nfrom {\n  transform: scaleX(100%);\n}\n\nto {\n  transform: scaleX(0%);\n}\n`;\n\nconst ProgressBar = styled.div`\n  ${(props) =>\n    props.isPlaying &&\n    css`\n      animation: ${shortening} ${progBarRate}s linear;\n    `}\n  background-color: #c44569;\n  height: 4px;\n  transform-origin: left center;\n  margin-bottom: 2px;\n`;\n\nfunction sliderThumbLabelFormat(value) {\n  return `${value}x`;\n}\nexport default MainHeader;\n","import React from \"react\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport {\n  ArrowCounterclockwise,\n  PlusSquare,\n  XCircle,\n  PencilSquare,\n  BoxArrowRight,\n  BoxArrowInRight,\n} from \"react-bootstrap-icons\";\n\nfunction ComputingControls(props) {\n  return (\n    <div>\n      <Row>\n        <Col sm={8}>\n          <Button\n            variant=\"outline-dark\"\n            size=\"md\"\n            id=\"new-node-btn\"\n            className=\"node-actions text-primary\"\n            onClick={props.handleShow}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <PlusSquare /> New Node\n          </Button>\n          <Button\n            variant=\"outline-dark\"\n            size=\"md\"\n            id=\"new-input-btn\"\n            className=\"node-actions text-primary\"\n            onClick={props.handleShowNewInputModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <BoxArrowInRight /> New Input Node\n          </Button>\n          <Button\n            variant=\"outline-dark\"\n            size=\"md\"\n            id=\"new-output-btn\"\n            className=\"node-actions text-primary\"\n            onClick={props.handleShowNewOutputModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <BoxArrowRight /> New Output Node\n          </Button>\n          <Button\n            variant=\"outline-primary\"\n            size=\"md\"\n            id=\"del-node-btn\"\n            className=\"node-actions text-danger\"\n            onClick={props.handleShowDeleteModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <XCircle /> Delete Node\n          </Button>\n          <Button\n            variant=\"outline-primary\"\n            size=\"md\"\n            id=\"edit-node-btn\"\n            className=\"node-actions text-success\"\n            onClick={props.handleShowEditModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <PencilSquare /> Edit Regular Node\n          </Button>\n\n          <Button\n            variant=\"outline-primary\"\n            size=\"md\"\n            id=\"edit-inp-node-btn\"\n            className=\"node-actions text-success\"\n            onClick={props.handleShowEditInputModal}\n            style={{ textAlign: \"center\", marginRight: \"0.3em\" }}\n            disabled={props.time > 0 ? true : false}\n          >\n            <PencilSquare /> Edit Input Node\n          </Button>\n        </Col>\n        <Col sm={4} style={{ textAlign: \"right\" }}>\n          <Button\n            id=\"res-btn\"\n            variant=\"danger\"\n            onClick={props.handleReset}\n            style={{ textAlign: \"center\", marginTop: \"0.4em\" }}\n          >\n            <ArrowCounterclockwise /> Restart Simulation\n          </Button>{\" \"}\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default ComputingControls;\n","import React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\n\n// Tour steps\nconst TOUR_STEPS = [\n  {\n    target: \".websnapse-title\",\n    title: \"Welcome to WebSnapse!\",\n    content:\n      \"This is a visual simulator to aid in the creation and simulation of SN P systems.\",\n    placement: \"center\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  /*{\n      target: \"#dropdown-basic\",\n      title: \"Node Actions\",\n      content: \"Here we can find several actions you can do to create your SN P system.\",\n      placement: 'right',\n      offset: 30,\n      disableBeacon: true,\n      disableOverlayClose: true,\n      floaterProps: {\n        disableAnimation: true,\n      }\n  },*/\n  {\n    target: \"#new-node-btn\",\n    title: \"New Node\",\n    content:\n      \"You can create a new neuron here. You will then be prompted to give it a label name, rules and the number of spikes the neuron should initially contain.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  ///(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n  {\n    target: \"#new-node-btn\",\n    title: \"Creating Rules\",\n    content:\n      \"When writing rules, it should follow the format E/c->p;d, where E follows the regular expression (na)(+***) with n equal to the number of spikes required, c is na with c equal to the number of spikes to be consumed, p is na with c equal to the number of spikes to be produced and d equal to the delay. If creating a forgetting rule, set p to 0. Example: 2a(a)+/2a->0;0\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#new-input-btn\",\n    title: \"New Input Node\",\n    content:\n      \"You can also create input neurons to send spikes to connected neurons in your system. Input neurons have spike trains made up of numbers separated by commas, with each representing the number of spikes the input neuron sends at the given time.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#new-output-btn\",\n    title: \"New Output Node\",\n    content:\n      \"You can also create output neurons to receive the output of your system in the form of a spike train (string) composed of numbers separated by commas, with each representing the number of spikes the output neuron receives at the given time.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#del-node-btn\",\n    title: \"Delete Node\",\n    content:\n      \"You can delete a neuron by choosing the neuron ID of the neuron you would like to delete. The neurons are ordered from oldest to last added. Deleting a neuron will also delete the synapses connected to the neuron. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#edit-node-btn\",\n    title: \"Edit Regular Node\",\n    content:\n      \"You can edit a neuron by choosing the neuron ID of the neuron you would like to edit. The neurons are ordered from oldest to last added. You can edit the rules and spikes of the neuron. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#edit-inp-node-btn\",\n    title: \"Edit Input Node\",\n    content:\n      \"You can edit an input neuron by choosing the neuron ID of the neuron you would like to edit. The neurons are ordered from oldest to last added. You can edit the spike train/bitstring of the neuron. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n\n  {\n    target: \"#edit-syn-btn\",\n    title: \"Edit Synapse\",\n    content:\n      \"You can edit a synapse by first clicking the synapse you want to edit. You can edit the weight of the selected synapse. You can choose to cancel or save the changes you made, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#del-syn-btn\",\n    title: \"Delete Synapse\",\n    content:\n      \"You can delete a synapse by first clicking the synapse you want to delete. You can choose to cancel or apply the deletion, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#clear-all-btn\",\n    title: \"Clear All\",\n    content:\n      \"You can clear your workspace and delete all elements by clicking this button. You can choose to cancel or apply the deletion, which will be seen right after.\",\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n\n  {\n    target: \".__________cytoscape_container\",\n    title: \"The Workspace\",\n    content:\n      \"After adding a neuron, you will be able to see a visual representation here.  Inside each neuron, you will find the number of spikes the neuron has at the top, and its rules at the center. Below the neuron, you will find the current delay timer before the neuron spikes. By default, this is set to 0 and a neuron is set to spike at -1. \",\n    placement: \"bottom-start\",\n    offset: -400,\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".__________cytoscape_container\",\n    title: \"Creating Edges\",\n    content:\n      \"To create s or edges,  hover over the source node or neuron then a grey circle will appear and you can drag that to see a directed arrow that you can connect to your desired next node or neuron. \",\n    placement: \"bottom-start\",\n    offset: -400,\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".snapse-controls\",\n    title: \"Starting the Simulation\",\n    content:\n      \"Now it's time for simulations! You can simulate the system one step at a time by using the forward button. You can use the backward button to revert the system to the previous timestep.\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".snapse-controls\",\n    title: \"Starting the Simulation\",\n    content:\n      \"You can also simulate the system continuously by clicking the play button. It will then proceed to go step-by-step at default 3 second intervals until the simulation is paused or the system halts.\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#speed-slider\",\n    title: \"Simulation Speed Slider\",\n    content:\n      \"You can change the speed of the continuous simulation through this slider. Drag the slider thumb to the left to slow the simulation down. Drag it to the right to speed the simulation up. Click 'Reset to 1x' to reset to default speed (3 second intervals).\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#res-btn\",\n    title: \"Restart Simulation\",\n    content:\n      \"Click this button to restart your simulation from the top (timestep = 0).\",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#formGridCheckbox\",\n    title: \"Pseudorandom or Guided Mode\",\n    content:\n      \"If your system contains points of non-determinism, or rather, if a neuron can execute more than one rule at a time, you can choose to set the simulation to pseudorandom or guided mode. When using pseudorandom mode, the system chooses what rule to execute. When using guided mode, you will be prompted to choose which rule the neuron should follow for that timestep. \",\n    placement: \"bottom\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#react-burger-menu-btn\",\n    title: \"Menu Actions\",\n    content:\n      \"In this menu, you will find other actions such as saving/loading files, viewing the choice history and some sample systems.\",\n    placement: \"right\",\n    offset: 390,\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#custom-file\",\n    title: \"Loading Files\",\n    content: \"You can open pre-made or saved SNP Systems files in XML format.\",\n    offset: 45,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#save-btn\",\n    title: \"Saving Systems\",\n    content:\n      \"You can also save the current system you are working on. It will create an XML file.\",\n    offset: 160,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#choice-history-btn\",\n    title: \"Choice History\",\n    content:\n      \"Here you can view a table containing the rules each neuron applied per timestep.\",\n    offset: 90,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \"#file-dropdown\",\n    title: \"Download Samples\",\n    content:\n      \"Lastly, you can download some of the sample SN P systems prepared here to start you off!\",\n    offset: 65,\n    placement: \"right\",\n    disableBeacon: true,\n    disableOverlayClose: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n  {\n    target: \".websnapse-title\",\n    title: \"Get Started\",\n    content:\n      \"And that's the end of the tutorial! Enjoy creating and simulating your own SN P systems!\",\n    placement: \"center\",\n    disableBeacon: true,\n    disableBeacon: true,\n    floaterProps: {\n      disableAnimation: true,\n    },\n  },\n];\n\n// Initial state for the tour component\nconst INITIAL_STATE = {\n  key: new Date(), // This field makes the tour to re-render when we restart the tour\n  run: false,\n  continuous: true, // Show next button\n  loading: false,\n  stepIndex: 0, // Make the component controlled\n  steps: TOUR_STEPS,\n};\n\n// Reducer will manage updating the local state\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    // start the tour\n    case \"START\":\n      return { ...state, run: true };\n    // Reset to 0th step\n    case \"RESET\":\n      return { ...state, stepIndex: 0 };\n    // Stop the tour\n    case \"STOP\":\n      return { ...state, run: false };\n    // Update the steps for next / back button click\n    case \"NEXT_OR_PREV\":\n      return { ...state, ...action.payload };\n    // Restart the tour - reset go to 1st step, restart create new tour\n    case \"RESTART\":\n      return {\n        ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date(),\n      };\n    default:\n      return state;\n  }\n};\n// styles\n\nconst styles = {\n  beaconInner: {\n    backgroundColor: \"#786fa6\",\n  },\n  tooltip: {\n    backgroundColor: \"#fff\",\n    textColor: \"#333\",\n    fontSize: 14,\n  },\n  tooltipContainer: {\n    textAlign: \"center\",\n  },\n  tooltipTitle: {\n    fontSize: 17,\n    margin: \"0 0 0 0\",\n  },\n  buttonNext: {\n    backgroundColor: \"#786fa6\",\n  },\n  buttonBack: {\n    color: \"#786fa6\",\n  },\n  buttonSkip: {\n    color: \"#786fa6\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(0,0,0, 0.7)\",\n    mixBlendMode: \"multiply\",\n  },\n  spotlightLegacy: {\n    boxShadow: `0 0 10 5 rgba(0,0,0, 0.5), 0 0 15px rgba(0, 0, 0, 0.3)`,\n  },\n  floater: {\n    arrow: {\n      color: \"#fff\",\n    },\n    tooltip: {\n      zIndex: 100,\n    },\n  },\n};\n\n// Tour component\nconst Tour = ({\n  handleShowSideBarMenu,\n  handleCloseSideBarMenu,\n  restartTutorial,\n  handleFalseRestartTutorial,\n}) => {\n  // Tour state is the state which control the JoyRide component\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  useEffect(() => {\n    // Auto start the tour if the tour is not viewed before\n    if (!localStorage.getItem(\"tour\")) {\n      dispatch({ type: \"START\" });\n    }\n  }, []);\n\n  // Set once tour is viewed, skipped or closed\n  const setTourViewed = () => {\n    localStorage.setItem(\"tour\", \"1\");\n  };\n\n  const callback = (data) => {\n    const { action, index, type, status } = data;\n\n    if (\n      // If close button clicked, then close the tour\n      action === ACTIONS.CLOSE ||\n      // If skipped or end tour, then close the tour\n      (status === STATUS.SKIPPED && tourState.run) ||\n      status === STATUS.FINISHED\n    ) {\n      dispatch({ type: \"STOP\" });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      // Check whether next or back button click and update the step.\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n      });\n    } else if (index === 0) {\n      handleCloseSideBarMenu();\n    } else if (index === 1) {\n      handleFalseRestartTutorial();\n    } else if (index === 1 && action === ACTIONS.PREV) {\n    } else if (index === 7) {\n    } else if (index === 18) {\n      handleShowSideBarMenu();\n    } else if (index === 23) {\n      handleCloseSideBarMenu();\n      setTourViewed();\n    }\n  };\n\n  const startTour = () => {\n    // Start the tour manually\n    dispatch({ type: \"RESTART\" });\n  };\n\n  useEffect(() => {\n    if (restartTutorial == true) {\n      startTour();\n    }\n  }, [restartTutorial]);\n\n  return (\n    <>\n      <JoyRide\n        {...tourState}\n        // Callback will pass all the actions\n        callback={callback}\n        scrollToFirstStep={true}\n        showSkipButton={true}\n        hideBackButton={false}\n        showProgress={true}\n        continuous={true}\n        styles={styles}\n        locale={{\n          last: \"End tour\",\n          skip: \"Skip tour\",\n        }}\n      />\n    </>\n  );\n};\n\nexport default Tour;\n","import React from \"react\";\nimport { slide as BMenu } from \"react-burger-menu\";\nimport { useState, useEffect, useRef } from \"react\";\nimport {\n  Button,\n  Container,\n  Alert,\n  Form,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\nimport { Save2, ClockHistory } from \"react-bootstrap-icons\";\nimport convert from \"xml-js\";\nimport { saveAs } from \"file-saver\";\nimport { Link } from \"react-router-dom\";\nimport \"./Menu.css\";\nvar options = {\n  compact: true,\n  ignoreComment: true,\n  spaces: 4,\n  sanitize: false,\n};\nfunction Menu(props) {\n  const [fileName, setFileName] = useState(\"\");\n  const handleSideBarMenu = () => {\n    props.setShowSideBarMenu(props.showSideBarMenu ? false : true);\n  };\n  const handleSave = () => {\n    //Convert JSON Array to string.\n    var wrapper = { content: props.neurons };\n    //console.log(neurons);\n    var result = convert.json2xml(wrapper, options);\n    //console.log(wrapper);\n    var blob = new Blob([result], { type: \"text/xml;charset=utf-8\" });\n    saveAs(blob, Date().toString() + \"-Neurons.xmp\");\n    props.setPristine();\n  };\n  const handleLoad = (input) => {\n    let file = input.files[0];\n    props.setHasEnded(false);\n\n    if (file.type && file.type.indexOf(\"text/xml\") === -1) {\n      props.showError(\"File is not a xml file\");\n      return;\n    }\n    const reader = new FileReader();\n    function nativeType(value) {\n      var nValue = Number(value);\n      if (!isNaN(nValue)) {\n        return nValue;\n      }\n      var bValue = value.toLowerCase();\n      if (bValue === \"true\") {\n        return true;\n      } else if (bValue === \"false\") {\n        return false;\n      }\n      return value;\n    }\n    var removeJsonTextAttribute = async function (value, parentElement) {\n      try {\n        const pOpKeys = Object.keys(parentElement._parent);\n        const keyNo = pOpKeys.length;\n        const keyName = pOpKeys[keyNo - 1];\n        const arrOfKey = parentElement._parent[keyName];\n        const arrOfKeyLen = arrOfKey.length;\n\n        if (arrOfKeyLen > 0) {\n          const arr = arrOfKey;\n          const arrIndex = arrOfKey.length - 1;\n          arr[arrIndex] = value;\n        } else if (keyName == \"out\") {\n          parentElement._parent[keyName] = [value];\n        } else if (keyName == \"bitstring\") {\n          parentElement._parent[keyName] = value;\n        } else {\n          parentElement._parent[keyName] = nativeType(value);\n        }\n      } catch (e) {}\n    };\n    reader.addEventListener(\"load\", async (event) => {\n      var options = {\n        compact: true,\n        trim: true,\n        ignoreDeclaration: true,\n        ignoreInstruction: true,\n        ignoreAttributes: true,\n        ignoreComment: true,\n        ignoreCdata: true,\n        ignoreDoctype: true,\n        textFn: removeJsonTextAttribute,\n      };\n      var result = await convert.xml2js(event.target.result, options);\n      await props.setNeurons((draft) => (draft = result.content));\n      await props.setNeurons((draft) => {\n        for (var k in draft) {\n          if (draft[k].bitstring) {\n            // console.log(\"loaded string\", draft[k].bitstring);\n            // draft[k].bitstring = \" \";\n          }\n          if (!draft[k].isOutput && !draft[k].out) {\n            draft[k].out = [];\n          }\n        }\n      });\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(result.content)\n      );\n      setFileName(file.name);\n    });\n    reader.readAsText(file);\n    props.setTime(0);\n  };\n\n  return (\n    <BMenu\n      id=\"side-bar-menu\"\n      isOpen={props.showSideBarMenu}\n      onClick={handleSideBarMenu}\n      disableCloseOnEsc\n      disableOverlayClick\n      noOverlay\n    >\n      <center>\n        <Form className=\"menuform\">\n          <Form.File\n            id=\"custom-file\"\n            label={fileName ? fileName : \"Load file...\"}\n            custom\n            onChange={(e) => {\n              handleLoad(e.target);\n            }}\n          />\n        </Form>\n        <div className=\"btncontainer\">\n          <Link\n            to=\"#\"\n            id=\"save-btn\"\n            variant=\"primary\"\n            disabled={props.time > 0 ? true : false}\n            onClick={handleSave}\n          >\n            <div className=\"btnMode\">\n              <Save2 /> Save\n            </div>\n          </Link>\n        </div>\n        <div className=\"btncontainer\">\n          <Link\n            to=\"#\"\n            id=\"choice-history-btn\"\n            variant=\"primary\"\n            onClick={props.handleShowChoiceHistoryModal}\n          >\n            <div className=\"btnMode\">\n              <ClockHistory /> Choice History\n            </div>\n          </Link>\n        </div>\n        <div>\n          <DropdownButton id=\"file-dropdown\" title=\"Download samples\">\n            <Dropdown.Item href=\"./samples/ex1 - 3k+3 spiker.xmp\" download>\n              Ex1 - 3k+3 Spiker\n            </Dropdown.Item>\n            <Dropdown.Item href=\"./samples/ex2 - bitadder.xmp\" download>\n              Ex2 - Bitadder\n            </Dropdown.Item>\n            <Dropdown.Item\n              href=\"./samples/ex3 - increasing comparator.xmp\"\n              download\n            >\n              Ex3 - Increasing Comparator\n            </Dropdown.Item>\n            <Dropdown.Item href=\"./samples/ex4 - naturally even.xmp\" download>\n              Ex4 - Naturally Even\n            </Dropdown.Item>\n            <Dropdown.Item\n              href=\"./samples/ex5 - naturally greater one.xmp\"\n              download\n            >\n              Ex5 - Naturally Greater Than One\n            </Dropdown.Item>\n          </DropdownButton>\n        </div>\n        <div className=\"btncontainer\">\n          <Link\n            to=\"#\"\n            id=\"restart-tour\"\n            variant=\"primary\"\n            onClick={props.handleTrueRestartTutorial}\n          >\n            <div className=\"btnMode\">Restart Tutorial</div>\n          </Link>\n        </div>\n        <a href=\"http://snapse.website\">\n          <div className=\"btncontainer\">\n            <div className=\"btnMode\">Return to Main Menu</div>\n          </div>\n        </a>\n        <div>\n          <Form>\n            <Form.Check\n              type=\"checkbox\"\n              label=\"Display details when hovering\"\n              defaultChecked={props.isHover}\n              onChange={() => {\n                props.isHover = !props.isHover;\n              }}\n            />\n          </Form>\n        </div>\n      </center>\n    </BMenu>\n  );\n}\n\nexport default Menu;\n","import \"../../scss/custom.scss\";\nimport \"./SNP.css\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { Container, Alert } from \"react-bootstrap\";\nimport Snapse from \"../../components/SNP/Snapse/Snapse\";\nimport { step, backStep, parseRule, null_step } from \"../../utils/automata\";\nimport ElementPopUp from \"../../components/SNP/forms/ElementPopUp\";\nimport ChooseRuleForm from \"../../components/SNP/forms/ChooseRuleForm\";\nimport NewNodeForm from \"../../components/SNP/forms/NewNodeForm\";\nimport AddSynapseWeightForm from \"../../components/SNP/forms/AddSynapseWeightForm\";\nimport NewOutputNodeForm from \"../../components/SNP/forms/NewOutputNodeForm\";\nimport NewInputNodeForm from \"../../components/SNP/forms/NewInputNodeForm\";\nimport EditNodeForm from \"../../components/SNP/forms/EditNodeForm\";\nimport EditInputNodeForm from \"../../components/SNP/forms/EditInputNodeForm\";\nimport EditSynapseForm from \"../../components/SNP/forms/EditSynapseForm\";\nimport DeleteNodeForm from \"../../components/SNP/forms/DeleteNodeForm\";\nimport DeleteAllForm from \"../../components/SNP/forms/DeleteAllForm\";\nimport DeleteSynapseForm from \"../../components/SNP/forms/DeleteSynapseForm\";\n\nimport ChoiceHistory from \"../../components/SNP/ChoiceHistory/ChoiceHistory\";\n\nimport useUnsavedChanges from \"../../components/SNP/useUnsavedChanges/useUnsavedChanges\";\nimport MainHeader from \"../../components/Header/Header\";\nimport ComputingControls from \"../../components/Header/ComputingControls\";\nimport Tour from \"../../components/SNP/Tour/Tour\";\nimport Menu from \"../../components/Menu/Menu\";\n\nvar isClickedSynapse = false;\nvar isHover = true;\nvar srcDel = \"\";\nvar dstDel = \"\";\n\nfunction useKey(key, cb) {\n  const isFocus = useRef(false);\n  const callbackRef = useRef(cb);\n\n  const inputs = document.getElementsByTagName(\"input\");\n\n  // if user is typing in input elements, isFocus = true, and keybinds should not work\n  useEffect(() => {\n    for (let input of inputs) {\n      input.addEventListener(\"focusin\", () => {\n        isFocus.current = true;\n        console.log(\"fOCUS ON ME\");\n      });\n      input.addEventListener(\"input\", () => {\n        isFocus.current = true;\n        console.log(\"fOCUS ON ME 2\");\n      });\n      input.addEventListener(\n        \"focus\",\n        () => {\n          isFocus.current = true;\n          console.log(\"fOCUS ON ME 3\");\n        },\n        true\n      );\n      input.addEventListener(\"focusout\", () => {\n        isFocus.current = false;\n      });\n    }\n  });\n\n  useEffect(() => {\n    callbackRef.current = cb;\n  });\n  useEffect(() => {\n    function debounced(delay, fn) {\n      let timerId;\n      return function (...args) {\n        if (timerId) {\n          clearTimeout(timerId);\n        }\n        timerId = setTimeout(() => {\n          fn(...args);\n          timerId = null;\n        }, delay);\n      };\n    }\n\n    function handleKeyDown(event) {\n      console.log(`isFocus ${isFocus.current}`);\n      if (event.code === key && isFocus.current == false) {\n        console.log(`handleKeyDown isFocus: ${isFocus.current}`);\n        //event.preventDefault();\n        console.log(\"Key pressed: \" + event.code);\n        callbackRef.current(event);\n      }\n    }\n\n    document.addEventListener(\"keydown\", (event) => {\n      if (event.code === \"Space\" && isFocus == false) {\n        event.preventDefault();\n      }\n    });\n    document.addEventListener(\"keydown\", debounced(300, handleKeyDown));\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [key]);\n}\n\nfunction SNP() {\n  const [neurons, setNeurons] = useImmer(\n    window.localStorage.getItem(\"originalNeurons\") != null\n      ? JSON.parse(window.localStorage.getItem(\"originalNeurons\"))\n      : {\n          n1: {\n            id: \"n1\",\n            position: { x: 50, y: 50 },\n            rules: \"a+/a->a;2\",\n            startingSpikes: 1,\n            delay: 0,\n            spikes: 1,\n            isOutput: false,\n            isInput: false,\n            out: [\"n2\"],\n            outWeights: { n2: 1 },\n          },\n          n2: {\n            id: \"n2\",\n            position: { x: 200, y: 50 },\n            rules: \"a/a->a;1\",\n            startingSpikes: 0,\n            delay: 0,\n            spikes: 0,\n            isOutput: false,\n            isInput: false,\n            out: [\"n3\"],\n            outWeights: { n3: 1 },\n          },\n          n3: {\n            id: \"n3\",\n            position: { x: 400, y: 50 },\n            rules: \"a/a->a;0\",\n            startingSpikes: 1,\n            delay: 0,\n            spikes: 1,\n            isOutput: false,\n            isInput: false,\n            out: [\"n4\"],\n            outWeights: { n4: 1 },\n          },\n          n4: {\n            id: \"n4\",\n            position: { x: 400, y: 200 },\n            isOutput: true,\n            isInput: false,\n            spikes: 0,\n            bitstring: \" \",\n          },\n        }\n  );\n\n  // States\n\n  const [srce, setSrce] = useState(\"\");\n  const [dest, setDest] = useState(\"\");\n  const [time, setTime] = useState(0);\n  const [nodeID, setNeuronID] = useState(\"\");\n  const [nodeType, setNeuronType] = useState(\"\");\n  const [nodeSRules, setNeuronSRules] = useState(\"\");\n  const [nodeFRules, setNeuronFRules] = useState(\"\");\n  const [nodeSpikes, setNeuronSpikes] = useState(\"\");\n  const [nodeBitstring, setNeuronBitstring] = useState(\"\");\n  const [weight_main, setWeight] = useState(1);\n  const [isRandom, setIsRandom] = useState(true);\n  const [Prompt, setDirty, setPristine] = useUnsavedChanges();\n  // Modal Booleans\n  const [showElementPopup, setShowElementPopup] = useState(false);\n  const [showAddWeightModal, setShowAddWeightModal] = useState(false);\n  const [showNewNodeModal, setShowNewNodeModal] = useState(false);\n  const [showNewOutputModal, setShowNewOutputModal] = useState(false);\n  const [showNewInputModal, setShowNewInputModal] = useState(false);\n  const [showChooseRuleModal, setShowChooseRuleModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showEditInputModal, setShowEditInputModal] = useState(false);\n  const [showEditSynapseModal, setShowEditSynapseModal] = useState(false);\n  const [showChoiceHistoryModal, setShowChoiceHistoryModal] = useState(false);\n  const [showDeleteAllModal, setShowDeleteAllModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showDeleteSynapseModal, setShowDeleteSynapseModal] = useState(false);\n  // Menu Booleans\n  const [showSideBarMenu, setShowSideBarMenu] = useState(false);\n  // Simulation Booleans\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [hasEnded, setHasEnded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [pBar, setPBar] = useState(0);\n  const headless = process.env.NODE_ENV === \"test\";\n  const [sld_value, setSldValue] = useState(1);\n\n  const handleSldOver = () => console.log(\"slide over\");\n  const handleClose = () => setShowNewNodeModal(false);\n  const handleShow = () => setShowNewNodeModal(true);\n  const handleCloseElementPopup = () => setShowElementPopup(false);\n  const handleShowElementPopup = () => setShowElementPopup(true);\n  const handleCloseAddWeightModal = () => setShowAddWeightModal(false);\n  const handleShowAddWeightModal = () => setShowAddWeightModal(true);\n  const handleCloseNewOutputModal = () => setShowNewOutputModal(false);\n  const handleShowNewOutputModal = () => setShowNewOutputModal(true);\n  const handleCloseNewInputModal = () => setShowNewInputModal(false);\n  const handleShowNewInputModal = () => setShowNewInputModal(true);\n  const handleCloseEditModal = () => setShowEditModal(false);\n  const handleShowEditInputModal = () => setShowEditInputModal(true);\n  const handleCloseEditInputModal = () => setShowEditInputModal(false);\n  const handleCloseEditSynapseModal = () => setShowEditSynapseModal(false);\n  const handleShowEditSynapseModal = () => setShowEditSynapseModal(true);\n  const handleShowEditModal = () => setShowEditModal(true);\n  const handleCloseDeleteAllModal = () => setShowDeleteAllModal(false);\n  const handleShowDeleteAllModal = () => setShowDeleteAllModal(true);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n  const handleCloseDeleteSynapseModal = () => setShowDeleteSynapseModal(false);\n  const handleShowDeleteSynapseModal = () => {\n    console.log(\"SHOW DELSYN\");\n    setShowDeleteSynapseModal(true);\n  };\n  const handleCloseChooseRuleModal = () => setShowChooseRuleModal(false);\n\n  const [mode, setMode] = useState(\"PSEUDORANDOM\");\n\n  // Menu Handles\n  const handleShowSideBarMenu = () => setShowSideBarMenu(true);\n  const handleCloseSideBarMenu = () => setShowSideBarMenu(false);\n\n  const [restartTutorial, setRestartTutorial] = useState(false);\n  const handleTrueRestartTutorial = () => setRestartTutorial(true);\n  const handleFalseRestartTutorial = () => setRestartTutorial(false);\n\n  const handleShowChoiceHistoryModal = () => {\n    setShowChoiceHistoryModal(true);\n    setShowSideBarMenu(false);\n  };\n  const handleCloseHoiceHistoryModal = () => setShowChoiceHistoryModal(false);\n\n  const handleSimulationEnd = () => {\n    setHasEnded(true);\n    setIsPlaying(false);\n    console.log(\"alert from simulationEnd\");\n    alert(\"Simulation has ended.\");\n  };\n\n  const showError = (text) => {\n    setError(text);\n    setTimeout(() => {\n      setError(\"\");\n    }, 3000);\n  };\n\n  /// add weight argument\n  /// make array of objects (neuron ID, weight)\n  const onEdgeCreate = (src, dst) => {\n    setSrce(src); // srce = src\n    setDest(dst); // dest = dst\n    console.log(\"newEdge\", src, dst);\n\n    setNeurons((draft) => {\n      var outCopy = [...draft[src].out];\n      var weightsDict = { ...draft[src].outWeights };\n      var currWeight = parseInt(weightsDict[dst]);\n\n      if (outCopy.includes(dst)) {\n        handleAddWeight(src, dst, currWeight + 1, 1);\n      } else {\n        handleShowAddWeightModal();\n\n        // outCopy.push(dst)\n        // console.log(outCopy);\n        // draft[src].out = outCopy;\n      }\n    });\n\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n  };\n\n  async function handleEditSynapse(src_id, dst_id, new_weight) {\n    await setNeurons((draft) => {\n      console.log(\"NEW WEIGHT\", new_weight);\n\n      var weightsDict = { ...draft[src_id].outWeights };\n      weightsDict[dst_id] = new_weight;\n      draft[src_id].outWeights = weightsDict;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleDeleteSynapse(srcID, dstID) {\n    await setNeurons((draft) => {\n      var origoutArr = [...draft[srcID].out];\n      // console.log(\"OLD OUT DETAILS \", origoutArr);\n\n      var weightsDict = { ...draft[srcID].outWeights };\n      // console.log(\"WEIGHTS DETAILS\", weightsDict);\n\n      if (weightsDict[dstID] > 1) {\n        draft[srcID].outWeights[dstID] = weightsDict[dstID] - 1;\n      } else {\n        // remove dstID in out\n        let arr = draft[srcID].out.filter(function (item) {\n          return item !== dstID;\n        });\n        draft[srcID].out = arr;\n\n        // remove dstID in outWeights\n        delete draft[srcID].outWeights[dstID];\n      }\n\n      var newoutArr = [...draft[srcID].out];\n      console.log(\"NEW OUT DETAILS \", newoutArr);\n\n      var newweightsDict = { ...draft[srcID].outWeights };\n      console.log(\"WEIGHTS DETAILS\", newweightsDict);\n\n      console.log(\"DELETED SYNAPSE\");\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n\n    handleNullForward();\n  }\n\n  async function handleAddWeight(src, dst, weight, flag) {\n    await setNeurons((draft) => {\n      var weightsDict = { ...draft[src].outWeights };\n      weightsDict[dst] = weight;\n      draft[src].outWeights = weightsDict;\n      console.log(\"WEIGHTS\", weightsDict);\n\n      if (flag == 0) {\n        console.log(\"FLAG IS ZERO\");\n        var outCopy = [...draft[src].out];\n        outCopy.push(dst);\n        draft[src].out = outCopy;\n      }\n    });\n    setSrce(\"\");\n    setDest(\"\");\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n\n    handleNullForward();\n  }\n\n  const handleNewPosition = async (position, id) => {\n    setNeurons((draft) => {\n      draft[id].position = position;\n    });\n    setDirty(true);\n    handleNullForward();\n  };\n\n  async function handleNewNode(newNeuron) {\n    await setNeurons((draft) => {\n      draft[newNeuron.id] = newNeuron;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n  async function handleNewOutput(newOutput) {\n    await setNeurons((draft) => {\n      draft[newOutput.id] = newOutput;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleNewInput(newInput) {\n    await setNeurons((draft) => {\n      draft[newInput.id] = newInput;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleShowDeleteAll() {\n    handleShowDeleteAllModal();\n  }\n\n  async function handleEditNode(id, rules, spikes) {\n    //console.log(\"handleEditNode\")\n    await setNeurons((draft) => {\n      draft[id].startingSpikes = spikes;\n      draft[id].spikes = spikes;\n      draft[id].rules = rules;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleEditInputNode(id, bitstring) {\n    //console.log(\"handleEditNode\")\n    await setNeurons((draft) => {\n      draft[id].bitstring = bitstring;\n    });\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  /// list all neurons connected to a neuron (delete ID to delete connected synapse)\n  async function handleDeleteNode(neuronId) {\n    console.log(\"handleDeleteNode\", neuronId);\n    await setNeurons((draft) => {\n      for (var k in draft) {\n        //first delete edges connected to neuron\n        var neuron = draft[k];\n        if (!neuron.isOutput && neuron.out) {\n          //const neuronOutKeys = neuron.out;\n          let arr = neuron.out.filter(function (item) {\n            return item !== neuronId;\n          });\n          draft[k].out = arr;\n        }\n      }\n      //delete neuron\n      delete draft[neuronId];\n    });\n\n    setDirty(true);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  async function handleDeleteAll() {\n    setNeurons((draft) => {\n      for (var k in draft) {\n        delete draft[k];\n      }\n    });\n    setDirty(true);\n    console.log(\"ALL DELETED\", neurons);\n    window.localStorage.setItem(\n      \"originalNeurons\",\n      JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n    );\n    handleNullForward();\n  }\n\n  function setIsClickedSynapse(click_flag, srcID, dstID) {\n    isClickedSynapse = click_flag;\n    srcDel = srcID;\n    dstDel = dstID;\n    let curr_weight;\n\n    if (isClickedSynapse) {\n      setNeurons((draft) => {\n        let weightsDict = { ...draft[srcID].outWeights };\n        curr_weight = parseInt(weightsDict[dstID]);\n      });\n\n      setWeight(curr_weight);\n    }\n  }\n\n  const handleReset = () => {\n    if (time != 0) {\n      var currNeurons = JSON.parse(\n        window.localStorage.getItem(\"originalNeurons\")\n      );\n\n      for (var k in currNeurons) {\n        var neuron = currNeurons[k];\n        if (!neuron.isOutput && !neuron.isInput) {\n          delete currNeurons[neuron.id].chosenRule;\n          delete currNeurons[neuron.id].currentRule;\n        }\n      }\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(currNeurons)\n      );\n\n      setNeurons(\n        (draft) =>\n          (draft = JSON.parse(window.localStorage.getItem(\"originalNeurons\")))\n      );\n      setTime(0);\n      setIsPlaying(false);\n      setHasEnded(false);\n      var tempNeurons = window.localStorage.getItem(\"originalNeurons\");\n\n      window.localStorage.clear();\n      window.localStorage.setItem(\"originalNeurons\", tempNeurons);\n    }\n  };\n\n  const [guidedRules, setGuidedRules] = useState({});\n  const handleStartGuidedMode = async (rules) => {\n    await setGuidedRules(rules);\n    setShowChooseRuleModal(true);\n    if (setShowChooseRuleModal) {\n      setIsPlaying(false); //pauses the graph playing while choosing rule\n    }\n  };\n  const handleChosenRules = (data) => {\n    handleCloseChooseRuleModal();\n    setNeurons((draft) => {\n      for (var j in draft) {\n        for (var k in data) {\n          if (j == k) {\n            var [requires, grouped, symbol, consumes, produces, delay] =\n              parseRule(data[k]);\n            draft[j].delay = delay;\n            //console.log(data[k]);\n            draft[j].currentRule = data[k];\n            draft[j].chosenRule = data[k];\n          }\n        }\n      }\n    });\n    //setIsPlaying(true); // continue playing after choosing rule\n  };\n\n  const onForward = async () => {\n    if (time == 0) {\n      //copy\n      console.log(\"FORWARD\");\n      console.log(\"Time is: \" + time);\n      window.localStorage.setItem(\n        \"originalNeurons\",\n        JSON.stringify(JSON.parse(JSON.stringify(neurons)))\n      );\n      window.localStorage.setItem(\"shouldTimeStep\", \"1\");\n      console.log(\n        \"Original neurons on time = 1 \",\n        window.localStorage.getItem(\"originalNeurons\")\n      );\n    }\n    if (!hasEnded) {\n      console.log(\"Time is: \" + time);\n      await setNeurons((neurons) =>\n        step(\n          neurons,\n          time,\n          isRandom,\n          handleStartGuidedMode,\n          handleSimulationEnd\n        )\n      );\n      if (window.localStorage.getItem(\"shouldTimeStep\") == \"1\") {\n        setTime((time) => time + 1);\n      }\n      console.log(\n        `Local storage space used: ${JSON.stringify(localStorage).length * 2}`\n      );\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  };\n\n  const onBackward = async () => {\n    if (time > 1) {\n      var tempTime = time.valueOf();\n      setHasEnded(false);\n      await setNeurons((neurons) => backStep(tempTime - 2));\n      await setTime((time) => time - 1);\n    } else if (time == 1) {\n      handleReset();\n    }\n  };\n  const neuronsRef = useRef(neurons);\n  neuronsRef.current = neurons;\n  const onIntervalStepRef = useRef(onForward);\n  onIntervalStepRef.current = () => {\n    onForward();\n    setPBar((p) => p + 1);\n  };\n\n  useEffect(() => {\n    if (showChooseRuleModal) {\n      console.log(\"showChooseRuleModal is true\");\n    }\n  }, []);\n\n  // Key Bindings\n  function handleSpace() {\n    console.log(\"Space Pressed\");\n    setIsPlaying((p) => !p);\n  }\n\n  function handleRightKey() {\n    console.log(\"Right Key Pressed\");\n    if (!hasEnded) {\n      onIntervalStepRef.current();\n    }\n  }\n\n  function handleLeftKey() {\n    console.log(\"Left Key Pressed\");\n    onBackward();\n  }\n\n  function handleDelBackspaceKey() {\n    if (isClickedSynapse) {\n      handleDeleteSynapse(srcDel, dstDel);\n    } else {\n      console.log(\"No edge clicked.\");\n    }\n    console.log(\"Delete/Bspace Pressed\");\n  }\n\n  useKey(\"Space\", handleSpace);\n  useKey(\"ArrowLeft\", handleLeftKey);\n  useKey(\"ArrowRight\", handleRightKey);\n  useKey(\"Delete\", handleDelBackspaceKey);\n  useKey(\"Backspace\", handleDelBackspaceKey);\n\n  /// handle backspace key for deleting neurons/synapses\n  function splitRules(rules) {\n    const testRe =\n      /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->([0-9]*)a;([0-9]+)/;\n    const forgetRe = /([0-9]*)a\\(*([0-9]*)(a*)\\)*(\\+?|\\*?)\\/([0-9]*)a->(0);(0)/;\n\n    var spikeRules = [];\n    var forgRules = [];\n\n    var splitRules = rules.split(\" \");\n    for (var i = 0; i < splitRules.length; i++) {\n      var testRes = testRe.exec(splitRules[i]);\n      var forgetRes = forgetRe.exec(splitRules[i]);\n\n      if (testRes) {\n        spikeRules.push(splitRules[i]);\n      } else if (forgetRes) {\n        forgRules.push(splitRules[i]);\n      }\n    }\n\n    return [spikeRules, forgRules];\n  }\n\n  function checkIsHover() {\n    //await setIsHover(isHover);\n    console.log(\"isHover is\", isHover);\n    return isHover;\n  }\n\n  function handleNullForward() {\n    document.getElementById(\"forwardBtn\").click();\n  }\n\n  return (\n    <>\n      <Tour\n        handleShowSideBarMenu={handleShowSideBarMenu}\n        handleCloseSideBarMenu={handleCloseSideBarMenu}\n        restartTutorial={restartTutorial}\n        handleFalseRestartTutorial={handleFalseRestartTutorial}\n      />\n      \n        {error && <Alert variant=\"danger\">{error}</Alert>}\n\n        {/* Hamburger Side Menu */}\n        <Menu\n          showSideBarMenu={showSideBarMenu}\n          setShowSideBarMenu={setShowSideBarMenu}\n          hasEnded={hasEnded}\n          setHasEnded={setHasEnded}\n          showError={showError}\n          neurons={neurons}\n          setNeurons={setNeurons}\n          time={time}\n          setTime={setTime}\n          isHover={isHover}\n          setPristine={setPristine}\n          handleShowChoiceHistoryModal={handleShowChoiceHistoryModal}\n          handleTrueRestartTutorial={handleTrueRestartTutorial}\n        />\n        {/* Main App Header */}\n        <Container>\n        <MainHeader\n          setMode={setMode}\n          mode={mode}\n          setIsRandom={setIsRandom}\n          time={time}\n          setTime={setTime}\n          onBackward={onBackward}\n          onForward={onForward}\n          pBar={pBar}\n          isPlaying={isPlaying}\n          setIsPlaying={setIsPlaying}\n          hasEnded={hasEnded}\n          neurons={neurons}\n          onIntervalStepRef={onIntervalStepRef}\n          sld_value={sld_value}\n          setSldValue={setSldValue}\n        />\n        <ComputingControls\n          handleShow={handleShow}\n          handleShowNewInputModal={handleShowNewInputModal}\n          handleShowNewOutputModal={handleShowNewOutputModal}\n          handleShowDeleteModal={handleShowDeleteModal}\n          handleShowEditModal={handleShowEditModal}\n          handleShowEditInputModal={handleShowEditInputModal}\n          handleReset={handleReset}\n        />\n\n        <hr />\n        <Snapse\n          neurons={neurons}\n          onEdgeCreate={(src, dst, addedEles) => {\n            onEdgeCreate(src.id(), dst.id());\n            addedEles.remove();\n          }}\n          handleChangePosition={handleNewPosition}\n          handleDeleteSynapse={handleDeleteSynapse}\n          setIsClickedSynapse={setIsClickedSynapse}\n          handleShowDeleteAll={handleShowDeleteAll}\n          headless={headless}\n          setNeurons={setNeurons}\n          splitRules={splitRules}\n          checkIsHover={checkIsHover}\n          handleShowEditSynapseModal={handleShowEditSynapseModal}\n          handleShowDeleteSynapseModal={handleShowDeleteSynapseModal}\n          time={time}\n        />\n\n        {/* Pop-ups Windows: Modals, Etc */}\n        <ChoiceHistory\n          time={time}\n          showChoiceHistoryModal={showChoiceHistoryModal}\n          handleCloseHoiceHistoryModal={handleCloseHoiceHistoryModal}\n        />\n        <ElementPopUp\n          showElementPopup={showElementPopup}\n          handleCloseElementPopup={handleCloseElementPopup}\n          handleError={showError}\n          nodeID={nodeID}\n          nodeType={nodeType}\n          nodeSRules={nodeSRules}\n          nodeFRules={nodeFRules}\n          nodeSpikes={nodeSpikes}\n          nodeBitstring={nodeBitstring}\n        />\n        <AddSynapseWeightForm\n          showAddWeightModal={showAddWeightModal}\n          handleCloseAddWeightModal={handleCloseAddWeightModal}\n          handleAddWeight={handleAddWeight}\n          handleError={showError}\n          srce={srce}\n          dest={dest}\n        />\n        <NewNodeForm\n          showNewNodeModal={showNewNodeModal}\n          handleCloseModal={handleClose}\n          handleNewNode={handleNewNode}\n          handleError={showError}\n        />\n        <NewOutputNodeForm\n          showNewOutputModal={showNewOutputModal}\n          handleCloseNewOutputModal={handleCloseNewOutputModal}\n          handleNewOutput={handleNewOutput}\n          handleError={showError}\n        />\n        <NewInputNodeForm\n          showNewInputModal={showNewInputModal}\n          handleCloseNewInputModal={handleCloseNewInputModal}\n          handleNewInput={handleNewInput}\n          handleError={showError}\n        />\n        <EditNodeForm\n          showEditModal={showEditModal}\n          handleCloseEditModal={handleCloseEditModal}\n          handleEditNode={handleEditNode}\n          handleError={showError}\n          neurons={neurons}\n        />\n        <EditInputNodeForm\n          showEditInputModal={showEditInputModal}\n          handleCloseEditInputModal={handleCloseEditInputModal}\n          handleEditInputNode={handleEditInputNode}\n          handleError={showError}\n          neurons={neurons}\n        />\n        <EditSynapseForm\n          showEditSynapseModal={showEditSynapseModal}\n          handleCloseEditSynapseModal={handleCloseEditSynapseModal}\n          handleEditSynapse={handleEditSynapse}\n          handleError={showError}\n          neurons={neurons}\n          isClickedSynapse={isClickedSynapse}\n          srcID={srcDel}\n          dstID={dstDel}\n          setWeight={setWeight}\n          weight_main={weight_main}\n          setNeurons={setNeurons}\n          handleDeleteSynapse={handleDeleteSynapse}\n        />\n        <DeleteAllForm\n          showDeleteAllModal={showDeleteAllModal}\n          handleCloseDeleteAllModal={handleCloseDeleteAllModal}\n          handleDeleteAll={handleDeleteAll}\n          handleError={showError}\n        />\n        <DeleteNodeForm\n          showDeleteModal={showDeleteModal}\n          handleCloseDeleteModal={handleCloseDeleteModal}\n          handleDeleteNode={handleDeleteNode}\n          handleError={showError}\n          neurons={neurons}\n        />\n        <DeleteSynapseForm\n          showDeleteSynapseModal={showDeleteSynapseModal}\n          handleCloseDeleteSynapseModal={handleCloseDeleteSynapseModal}\n          handleDeleteSynapse={handleDeleteSynapse}\n          handleError={showError}\n          setNeurons={setNeurons}\n          isClickedSynapse={isClickedSynapse}\n          srcID={srcDel}\n          dstID={dstDel}\n        />\n        <ChooseRuleForm\n          showChooseRuleModal={showChooseRuleModal}\n          handleCloseChooseRuleModal={handleCloseChooseRuleModal}\n          rules={guidedRules}\n          handleChosenRules={handleChosenRules}\n        />\n        {Prompt}\n      </Container>\n    </>\n  );\n}\nexport default SNP;\n","import { HashRouter as Router, Switch, Link, Route } from \"react-router-dom\";\nimport SNP from \"./pages/SNP/SNP\";\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <SNP />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/Peace Sans.f59a8de8.otf\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport cytoscape from \"cytoscape\";\nimport popper from \"cytoscape-popper\";\nimport edgehandles from \"cytoscape-edgehandles\";\nimport gridGuide from \"cytoscape-grid-guide\";\nimport \"./fonts/Peace Sans.otf\";\ncytoscape.use(edgehandles);\ncytoscape.use(gridGuide);\ncytoscape.use(popper);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}